/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBScheduleDay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBScheduleDay{}

// MLBScheduleDay struct for MLBScheduleDay
type MLBScheduleDay struct {
	Date *string `json:"date,omitempty"`
	TotalItems *float32 `json:"totalItems,omitempty"`
	TotalEvents *float32 `json:"totalEvents,omitempty"`
	TotalGames *float32 `json:"totalGames,omitempty"`
	TotalGamesInProgress *float32 `json:"totalGamesInProgress,omitempty"`
	Games []MLBGame `json:"games"`
}

type _MLBScheduleDay MLBScheduleDay

// NewMLBScheduleDay instantiates a new MLBScheduleDay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBScheduleDay(games []MLBGame) *MLBScheduleDay {
	this := MLBScheduleDay{}
	this.Games = games
	return &this
}

// NewMLBScheduleDayWithDefaults instantiates a new MLBScheduleDay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBScheduleDayWithDefaults() *MLBScheduleDay {
	this := MLBScheduleDay{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *MLBScheduleDay) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBScheduleDay) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *MLBScheduleDay) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *MLBScheduleDay) SetDate(v string) {
	o.Date = &v
}

// GetTotalItems returns the TotalItems field value if set, zero value otherwise.
func (o *MLBScheduleDay) GetTotalItems() float32 {
	if o == nil || IsNil(o.TotalItems) {
		var ret float32
		return ret
	}
	return *o.TotalItems
}

// GetTotalItemsOk returns a tuple with the TotalItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBScheduleDay) GetTotalItemsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalItems) {
		return nil, false
	}
	return o.TotalItems, true
}

// HasTotalItems returns a boolean if a field has been set.
func (o *MLBScheduleDay) HasTotalItems() bool {
	if o != nil && !IsNil(o.TotalItems) {
		return true
	}

	return false
}

// SetTotalItems gets a reference to the given float32 and assigns it to the TotalItems field.
func (o *MLBScheduleDay) SetTotalItems(v float32) {
	o.TotalItems = &v
}

// GetTotalEvents returns the TotalEvents field value if set, zero value otherwise.
func (o *MLBScheduleDay) GetTotalEvents() float32 {
	if o == nil || IsNil(o.TotalEvents) {
		var ret float32
		return ret
	}
	return *o.TotalEvents
}

// GetTotalEventsOk returns a tuple with the TotalEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBScheduleDay) GetTotalEventsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalEvents) {
		return nil, false
	}
	return o.TotalEvents, true
}

// HasTotalEvents returns a boolean if a field has been set.
func (o *MLBScheduleDay) HasTotalEvents() bool {
	if o != nil && !IsNil(o.TotalEvents) {
		return true
	}

	return false
}

// SetTotalEvents gets a reference to the given float32 and assigns it to the TotalEvents field.
func (o *MLBScheduleDay) SetTotalEvents(v float32) {
	o.TotalEvents = &v
}

// GetTotalGames returns the TotalGames field value if set, zero value otherwise.
func (o *MLBScheduleDay) GetTotalGames() float32 {
	if o == nil || IsNil(o.TotalGames) {
		var ret float32
		return ret
	}
	return *o.TotalGames
}

// GetTotalGamesOk returns a tuple with the TotalGames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBScheduleDay) GetTotalGamesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalGames) {
		return nil, false
	}
	return o.TotalGames, true
}

// HasTotalGames returns a boolean if a field has been set.
func (o *MLBScheduleDay) HasTotalGames() bool {
	if o != nil && !IsNil(o.TotalGames) {
		return true
	}

	return false
}

// SetTotalGames gets a reference to the given float32 and assigns it to the TotalGames field.
func (o *MLBScheduleDay) SetTotalGames(v float32) {
	o.TotalGames = &v
}

// GetTotalGamesInProgress returns the TotalGamesInProgress field value if set, zero value otherwise.
func (o *MLBScheduleDay) GetTotalGamesInProgress() float32 {
	if o == nil || IsNil(o.TotalGamesInProgress) {
		var ret float32
		return ret
	}
	return *o.TotalGamesInProgress
}

// GetTotalGamesInProgressOk returns a tuple with the TotalGamesInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBScheduleDay) GetTotalGamesInProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalGamesInProgress) {
		return nil, false
	}
	return o.TotalGamesInProgress, true
}

// HasTotalGamesInProgress returns a boolean if a field has been set.
func (o *MLBScheduleDay) HasTotalGamesInProgress() bool {
	if o != nil && !IsNil(o.TotalGamesInProgress) {
		return true
	}

	return false
}

// SetTotalGamesInProgress gets a reference to the given float32 and assigns it to the TotalGamesInProgress field.
func (o *MLBScheduleDay) SetTotalGamesInProgress(v float32) {
	o.TotalGamesInProgress = &v
}

// GetGames returns the Games field value
func (o *MLBScheduleDay) GetGames() []MLBGame {
	if o == nil {
		var ret []MLBGame
		return ret
	}

	return o.Games
}

// GetGamesOk returns a tuple with the Games field value
// and a boolean to check if the value has been set.
func (o *MLBScheduleDay) GetGamesOk() ([]MLBGame, bool) {
	if o == nil {
		return nil, false
	}
	return o.Games, true
}

// SetGames sets field value
func (o *MLBScheduleDay) SetGames(v []MLBGame) {
	o.Games = v
}

func (o MLBScheduleDay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBScheduleDay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.TotalItems) {
		toSerialize["totalItems"] = o.TotalItems
	}
	if !IsNil(o.TotalEvents) {
		toSerialize["totalEvents"] = o.TotalEvents
	}
	if !IsNil(o.TotalGames) {
		toSerialize["totalGames"] = o.TotalGames
	}
	if !IsNil(o.TotalGamesInProgress) {
		toSerialize["totalGamesInProgress"] = o.TotalGamesInProgress
	}
	toSerialize["games"] = o.Games
	return toSerialize, nil
}

func (o *MLBScheduleDay) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"games",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBScheduleDay := _MLBScheduleDay{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBScheduleDay)

	if err != nil {
		return err
	}

	*o = MLBScheduleDay(varMLBScheduleDay)

	return err
}

type NullableMLBScheduleDay struct {
	value *MLBScheduleDay
	isSet bool
}

func (v NullableMLBScheduleDay) Get() *MLBScheduleDay {
	return v.value
}

func (v *NullableMLBScheduleDay) Set(val *MLBScheduleDay) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBScheduleDay) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBScheduleDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBScheduleDay(val *MLBScheduleDay) *NullableMLBScheduleDay {
	return &NullableMLBScheduleDay{value: val, isSet: true}
}

func (v NullableMLBScheduleDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBScheduleDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


