/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBSchedule{}

// MLBSchedule Schedule 
type MLBSchedule struct {
	TotalItems float32 `json:"totalItems"`
	TotalEvents float32 `json:"totalEvents"`
	TotalGames float32 `json:"totalGames"`
	TotalGamesInProgress float32 `json:"totalGamesInProgress"`
	Dates []MLBScheduleDay `json:"dates"`
}

type _MLBSchedule MLBSchedule

// NewMLBSchedule instantiates a new MLBSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBSchedule(totalItems float32, totalEvents float32, totalGames float32, totalGamesInProgress float32, dates []MLBScheduleDay) *MLBSchedule {
	this := MLBSchedule{}
	this.TotalItems = totalItems
	this.TotalEvents = totalEvents
	this.TotalGames = totalGames
	this.TotalGamesInProgress = totalGamesInProgress
	this.Dates = dates
	return &this
}

// NewMLBScheduleWithDefaults instantiates a new MLBSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBScheduleWithDefaults() *MLBSchedule {
	this := MLBSchedule{}
	return &this
}

// GetTotalItems returns the TotalItems field value
func (o *MLBSchedule) GetTotalItems() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalItems
}

// GetTotalItemsOk returns a tuple with the TotalItems field value
// and a boolean to check if the value has been set.
func (o *MLBSchedule) GetTotalItemsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalItems, true
}

// SetTotalItems sets field value
func (o *MLBSchedule) SetTotalItems(v float32) {
	o.TotalItems = v
}

// GetTotalEvents returns the TotalEvents field value
func (o *MLBSchedule) GetTotalEvents() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalEvents
}

// GetTotalEventsOk returns a tuple with the TotalEvents field value
// and a boolean to check if the value has been set.
func (o *MLBSchedule) GetTotalEventsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalEvents, true
}

// SetTotalEvents sets field value
func (o *MLBSchedule) SetTotalEvents(v float32) {
	o.TotalEvents = v
}

// GetTotalGames returns the TotalGames field value
func (o *MLBSchedule) GetTotalGames() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalGames
}

// GetTotalGamesOk returns a tuple with the TotalGames field value
// and a boolean to check if the value has been set.
func (o *MLBSchedule) GetTotalGamesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalGames, true
}

// SetTotalGames sets field value
func (o *MLBSchedule) SetTotalGames(v float32) {
	o.TotalGames = v
}

// GetTotalGamesInProgress returns the TotalGamesInProgress field value
func (o *MLBSchedule) GetTotalGamesInProgress() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalGamesInProgress
}

// GetTotalGamesInProgressOk returns a tuple with the TotalGamesInProgress field value
// and a boolean to check if the value has been set.
func (o *MLBSchedule) GetTotalGamesInProgressOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalGamesInProgress, true
}

// SetTotalGamesInProgress sets field value
func (o *MLBSchedule) SetTotalGamesInProgress(v float32) {
	o.TotalGamesInProgress = v
}

// GetDates returns the Dates field value
func (o *MLBSchedule) GetDates() []MLBScheduleDay {
	if o == nil {
		var ret []MLBScheduleDay
		return ret
	}

	return o.Dates
}

// GetDatesOk returns a tuple with the Dates field value
// and a boolean to check if the value has been set.
func (o *MLBSchedule) GetDatesOk() ([]MLBScheduleDay, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dates, true
}

// SetDates sets field value
func (o *MLBSchedule) SetDates(v []MLBScheduleDay) {
	o.Dates = v
}

func (o MLBSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalItems"] = o.TotalItems
	toSerialize["totalEvents"] = o.TotalEvents
	toSerialize["totalGames"] = o.TotalGames
	toSerialize["totalGamesInProgress"] = o.TotalGamesInProgress
	toSerialize["dates"] = o.Dates
	return toSerialize, nil
}

func (o *MLBSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalItems",
		"totalEvents",
		"totalGames",
		"totalGamesInProgress",
		"dates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBSchedule := _MLBSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBSchedule)

	if err != nil {
		return err
	}

	*o = MLBSchedule(varMLBSchedule)

	return err
}

type NullableMLBSchedule struct {
	value *MLBSchedule
	isSet bool
}

func (v NullableMLBSchedule) Get() *MLBSchedule {
	return v.value
}

func (v *NullableMLBSchedule) Set(val *MLBSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBSchedule(val *MLBSchedule) *NullableMLBSchedule {
	return &NullableMLBSchedule{value: val, isSet: true}
}

func (v NullableMLBSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


