/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBStandings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBStandings{}

// MLBStandings Standings 
type MLBStandings struct {
	StandingsType *string `json:"standingsType,omitempty"`
	League MLBLeague `json:"league"`
	Division MLBDivision `json:"division"`
	Sport MLBSport `json:"sport"`
	LastUpdated *string `json:"lastUpdated,omitempty"`
	TeamRecords []MLBRecord `json:"teamRecords"`
}

type _MLBStandings MLBStandings

// NewMLBStandings instantiates a new MLBStandings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBStandings(league MLBLeague, division MLBDivision, sport MLBSport, teamRecords []MLBRecord) *MLBStandings {
	this := MLBStandings{}
	this.League = league
	this.Division = division
	this.Sport = sport
	this.TeamRecords = teamRecords
	return &this
}

// NewMLBStandingsWithDefaults instantiates a new MLBStandings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBStandingsWithDefaults() *MLBStandings {
	this := MLBStandings{}
	return &this
}

// GetStandingsType returns the StandingsType field value if set, zero value otherwise.
func (o *MLBStandings) GetStandingsType() string {
	if o == nil || IsNil(o.StandingsType) {
		var ret string
		return ret
	}
	return *o.StandingsType
}

// GetStandingsTypeOk returns a tuple with the StandingsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBStandings) GetStandingsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StandingsType) {
		return nil, false
	}
	return o.StandingsType, true
}

// HasStandingsType returns a boolean if a field has been set.
func (o *MLBStandings) HasStandingsType() bool {
	if o != nil && !IsNil(o.StandingsType) {
		return true
	}

	return false
}

// SetStandingsType gets a reference to the given string and assigns it to the StandingsType field.
func (o *MLBStandings) SetStandingsType(v string) {
	o.StandingsType = &v
}

// GetLeague returns the League field value
func (o *MLBStandings) GetLeague() MLBLeague {
	if o == nil {
		var ret MLBLeague
		return ret
	}

	return o.League
}

// GetLeagueOk returns a tuple with the League field value
// and a boolean to check if the value has been set.
func (o *MLBStandings) GetLeagueOk() (*MLBLeague, bool) {
	if o == nil {
		return nil, false
	}
	return &o.League, true
}

// SetLeague sets field value
func (o *MLBStandings) SetLeague(v MLBLeague) {
	o.League = v
}

// GetDivision returns the Division field value
func (o *MLBStandings) GetDivision() MLBDivision {
	if o == nil {
		var ret MLBDivision
		return ret
	}

	return o.Division
}

// GetDivisionOk returns a tuple with the Division field value
// and a boolean to check if the value has been set.
func (o *MLBStandings) GetDivisionOk() (*MLBDivision, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Division, true
}

// SetDivision sets field value
func (o *MLBStandings) SetDivision(v MLBDivision) {
	o.Division = v
}

// GetSport returns the Sport field value
func (o *MLBStandings) GetSport() MLBSport {
	if o == nil {
		var ret MLBSport
		return ret
	}

	return o.Sport
}

// GetSportOk returns a tuple with the Sport field value
// and a boolean to check if the value has been set.
func (o *MLBStandings) GetSportOk() (*MLBSport, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sport, true
}

// SetSport sets field value
func (o *MLBStandings) SetSport(v MLBSport) {
	o.Sport = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *MLBStandings) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBStandings) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *MLBStandings) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *MLBStandings) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetTeamRecords returns the TeamRecords field value
func (o *MLBStandings) GetTeamRecords() []MLBRecord {
	if o == nil {
		var ret []MLBRecord
		return ret
	}

	return o.TeamRecords
}

// GetTeamRecordsOk returns a tuple with the TeamRecords field value
// and a boolean to check if the value has been set.
func (o *MLBStandings) GetTeamRecordsOk() ([]MLBRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamRecords, true
}

// SetTeamRecords sets field value
func (o *MLBStandings) SetTeamRecords(v []MLBRecord) {
	o.TeamRecords = v
}

func (o MLBStandings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBStandings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StandingsType) {
		toSerialize["standingsType"] = o.StandingsType
	}
	toSerialize["league"] = o.League
	toSerialize["division"] = o.Division
	toSerialize["sport"] = o.Sport
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	toSerialize["teamRecords"] = o.TeamRecords
	return toSerialize, nil
}

func (o *MLBStandings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"league",
		"division",
		"sport",
		"teamRecords",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBStandings := _MLBStandings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBStandings)

	if err != nil {
		return err
	}

	*o = MLBStandings(varMLBStandings)

	return err
}

type NullableMLBStandings struct {
	value *MLBStandings
	isSet bool
}

func (v NullableMLBStandings) Get() *MLBStandings {
	return v.value
}

func (v *NullableMLBStandings) Set(val *MLBStandings) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBStandings) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBStandings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBStandings(val *MLBStandings) *NullableMLBStandings {
	return &NullableMLBStandings{value: val, isSet: true}
}

func (v NullableMLBStandings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBStandings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


