/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBSport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBSport{}

// MLBSport Sport 
type MLBSport struct {
	Id float32 `json:"id"`
	Code *string `json:"code,omitempty"`
	Link *string `json:"link,omitempty"`
	Name *string `json:"name,omitempty"`
	Abbreviation *string `json:"abbreviation,omitempty"`
	SortOrder *float32 `json:"sortOrder,omitempty"`
	ActiveStatus *bool `json:"activeStatus,omitempty"`
}

type _MLBSport MLBSport

// NewMLBSport instantiates a new MLBSport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBSport(id float32) *MLBSport {
	this := MLBSport{}
	this.Id = id
	return &this
}

// NewMLBSportWithDefaults instantiates a new MLBSport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBSportWithDefaults() *MLBSport {
	this := MLBSport{}
	return &this
}

// GetId returns the Id field value
func (o *MLBSport) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MLBSport) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MLBSport) SetId(v float32) {
	o.Id = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MLBSport) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSport) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MLBSport) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *MLBSport) SetCode(v string) {
	o.Code = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *MLBSport) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSport) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *MLBSport) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *MLBSport) SetLink(v string) {
	o.Link = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MLBSport) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSport) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MLBSport) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MLBSport) SetName(v string) {
	o.Name = &v
}

// GetAbbreviation returns the Abbreviation field value if set, zero value otherwise.
func (o *MLBSport) GetAbbreviation() string {
	if o == nil || IsNil(o.Abbreviation) {
		var ret string
		return ret
	}
	return *o.Abbreviation
}

// GetAbbreviationOk returns a tuple with the Abbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSport) GetAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.Abbreviation) {
		return nil, false
	}
	return o.Abbreviation, true
}

// HasAbbreviation returns a boolean if a field has been set.
func (o *MLBSport) HasAbbreviation() bool {
	if o != nil && !IsNil(o.Abbreviation) {
		return true
	}

	return false
}

// SetAbbreviation gets a reference to the given string and assigns it to the Abbreviation field.
func (o *MLBSport) SetAbbreviation(v string) {
	o.Abbreviation = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *MLBSport) GetSortOrder() float32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret float32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSport) GetSortOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *MLBSport) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given float32 and assigns it to the SortOrder field.
func (o *MLBSport) SetSortOrder(v float32) {
	o.SortOrder = &v
}

// GetActiveStatus returns the ActiveStatus field value if set, zero value otherwise.
func (o *MLBSport) GetActiveStatus() bool {
	if o == nil || IsNil(o.ActiveStatus) {
		var ret bool
		return ret
	}
	return *o.ActiveStatus
}

// GetActiveStatusOk returns a tuple with the ActiveStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSport) GetActiveStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveStatus) {
		return nil, false
	}
	return o.ActiveStatus, true
}

// HasActiveStatus returns a boolean if a field has been set.
func (o *MLBSport) HasActiveStatus() bool {
	if o != nil && !IsNil(o.ActiveStatus) {
		return true
	}

	return false
}

// SetActiveStatus gets a reference to the given bool and assigns it to the ActiveStatus field.
func (o *MLBSport) SetActiveStatus(v bool) {
	o.ActiveStatus = &v
}

func (o MLBSport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBSport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Abbreviation) {
		toSerialize["abbreviation"] = o.Abbreviation
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.ActiveStatus) {
		toSerialize["activeStatus"] = o.ActiveStatus
	}
	return toSerialize, nil
}

func (o *MLBSport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBSport := _MLBSport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBSport)

	if err != nil {
		return err
	}

	*o = MLBSport(varMLBSport)

	return err
}

type NullableMLBSport struct {
	value *MLBSport
	isSet bool
}

func (v NullableMLBSport) Get() *MLBSport {
	return v.value
}

func (v *NullableMLBSport) Set(val *MLBSport) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBSport) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBSport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBSport(val *MLBSport) *NullableMLBSport {
	return &NullableMLBSport{value: val, isSet: true}
}

func (v NullableMLBSport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBSport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


