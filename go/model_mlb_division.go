/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBDivision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBDivision{}

// MLBDivision Division  
type MLBDivision struct {
	Id float32 `json:"id"`
	Name string `json:"name"`
	Season *string `json:"season,omitempty"`
	NameShort *string `json:"nameShort,omitempty"`
	Link *string `json:"link,omitempty"`
	Abbreviation *string `json:"abbreviation,omitempty"`
	League *MLBLeague `json:"league,omitempty"`
	Sport *MLBSport `json:"sport,omitempty"`
	HasWildcard *bool `json:"hasWildcard,omitempty"`
	SortOrder *float32 `json:"sortOrder,omitempty"`
	NumPlayoffTeams *float32 `json:"numPlayoffTeams,omitempty"`
	Active *bool `json:"active,omitempty"`
}

type _MLBDivision MLBDivision

// NewMLBDivision instantiates a new MLBDivision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBDivision(id float32, name string) *MLBDivision {
	this := MLBDivision{}
	this.Id = id
	this.Name = name
	return &this
}

// NewMLBDivisionWithDefaults instantiates a new MLBDivision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBDivisionWithDefaults() *MLBDivision {
	this := MLBDivision{}
	return &this
}

// GetId returns the Id field value
func (o *MLBDivision) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MLBDivision) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MLBDivision) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MLBDivision) SetName(v string) {
	o.Name = v
}

// GetSeason returns the Season field value if set, zero value otherwise.
func (o *MLBDivision) GetSeason() string {
	if o == nil || IsNil(o.Season) {
		var ret string
		return ret
	}
	return *o.Season
}

// GetSeasonOk returns a tuple with the Season field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetSeasonOk() (*string, bool) {
	if o == nil || IsNil(o.Season) {
		return nil, false
	}
	return o.Season, true
}

// HasSeason returns a boolean if a field has been set.
func (o *MLBDivision) HasSeason() bool {
	if o != nil && !IsNil(o.Season) {
		return true
	}

	return false
}

// SetSeason gets a reference to the given string and assigns it to the Season field.
func (o *MLBDivision) SetSeason(v string) {
	o.Season = &v
}

// GetNameShort returns the NameShort field value if set, zero value otherwise.
func (o *MLBDivision) GetNameShort() string {
	if o == nil || IsNil(o.NameShort) {
		var ret string
		return ret
	}
	return *o.NameShort
}

// GetNameShortOk returns a tuple with the NameShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetNameShortOk() (*string, bool) {
	if o == nil || IsNil(o.NameShort) {
		return nil, false
	}
	return o.NameShort, true
}

// HasNameShort returns a boolean if a field has been set.
func (o *MLBDivision) HasNameShort() bool {
	if o != nil && !IsNil(o.NameShort) {
		return true
	}

	return false
}

// SetNameShort gets a reference to the given string and assigns it to the NameShort field.
func (o *MLBDivision) SetNameShort(v string) {
	o.NameShort = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *MLBDivision) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *MLBDivision) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *MLBDivision) SetLink(v string) {
	o.Link = &v
}

// GetAbbreviation returns the Abbreviation field value if set, zero value otherwise.
func (o *MLBDivision) GetAbbreviation() string {
	if o == nil || IsNil(o.Abbreviation) {
		var ret string
		return ret
	}
	return *o.Abbreviation
}

// GetAbbreviationOk returns a tuple with the Abbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.Abbreviation) {
		return nil, false
	}
	return o.Abbreviation, true
}

// HasAbbreviation returns a boolean if a field has been set.
func (o *MLBDivision) HasAbbreviation() bool {
	if o != nil && !IsNil(o.Abbreviation) {
		return true
	}

	return false
}

// SetAbbreviation gets a reference to the given string and assigns it to the Abbreviation field.
func (o *MLBDivision) SetAbbreviation(v string) {
	o.Abbreviation = &v
}

// GetLeague returns the League field value if set, zero value otherwise.
func (o *MLBDivision) GetLeague() MLBLeague {
	if o == nil || IsNil(o.League) {
		var ret MLBLeague
		return ret
	}
	return *o.League
}

// GetLeagueOk returns a tuple with the League field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetLeagueOk() (*MLBLeague, bool) {
	if o == nil || IsNil(o.League) {
		return nil, false
	}
	return o.League, true
}

// HasLeague returns a boolean if a field has been set.
func (o *MLBDivision) HasLeague() bool {
	if o != nil && !IsNil(o.League) {
		return true
	}

	return false
}

// SetLeague gets a reference to the given MLBLeague and assigns it to the League field.
func (o *MLBDivision) SetLeague(v MLBLeague) {
	o.League = &v
}

// GetSport returns the Sport field value if set, zero value otherwise.
func (o *MLBDivision) GetSport() MLBSport {
	if o == nil || IsNil(o.Sport) {
		var ret MLBSport
		return ret
	}
	return *o.Sport
}

// GetSportOk returns a tuple with the Sport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetSportOk() (*MLBSport, bool) {
	if o == nil || IsNil(o.Sport) {
		return nil, false
	}
	return o.Sport, true
}

// HasSport returns a boolean if a field has been set.
func (o *MLBDivision) HasSport() bool {
	if o != nil && !IsNil(o.Sport) {
		return true
	}

	return false
}

// SetSport gets a reference to the given MLBSport and assigns it to the Sport field.
func (o *MLBDivision) SetSport(v MLBSport) {
	o.Sport = &v
}

// GetHasWildcard returns the HasWildcard field value if set, zero value otherwise.
func (o *MLBDivision) GetHasWildcard() bool {
	if o == nil || IsNil(o.HasWildcard) {
		var ret bool
		return ret
	}
	return *o.HasWildcard
}

// GetHasWildcardOk returns a tuple with the HasWildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetHasWildcardOk() (*bool, bool) {
	if o == nil || IsNil(o.HasWildcard) {
		return nil, false
	}
	return o.HasWildcard, true
}

// HasHasWildcard returns a boolean if a field has been set.
func (o *MLBDivision) HasHasWildcard() bool {
	if o != nil && !IsNil(o.HasWildcard) {
		return true
	}

	return false
}

// SetHasWildcard gets a reference to the given bool and assigns it to the HasWildcard field.
func (o *MLBDivision) SetHasWildcard(v bool) {
	o.HasWildcard = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *MLBDivision) GetSortOrder() float32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret float32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetSortOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *MLBDivision) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given float32 and assigns it to the SortOrder field.
func (o *MLBDivision) SetSortOrder(v float32) {
	o.SortOrder = &v
}

// GetNumPlayoffTeams returns the NumPlayoffTeams field value if set, zero value otherwise.
func (o *MLBDivision) GetNumPlayoffTeams() float32 {
	if o == nil || IsNil(o.NumPlayoffTeams) {
		var ret float32
		return ret
	}
	return *o.NumPlayoffTeams
}

// GetNumPlayoffTeamsOk returns a tuple with the NumPlayoffTeams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetNumPlayoffTeamsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumPlayoffTeams) {
		return nil, false
	}
	return o.NumPlayoffTeams, true
}

// HasNumPlayoffTeams returns a boolean if a field has been set.
func (o *MLBDivision) HasNumPlayoffTeams() bool {
	if o != nil && !IsNil(o.NumPlayoffTeams) {
		return true
	}

	return false
}

// SetNumPlayoffTeams gets a reference to the given float32 and assigns it to the NumPlayoffTeams field.
func (o *MLBDivision) SetNumPlayoffTeams(v float32) {
	o.NumPlayoffTeams = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *MLBDivision) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBDivision) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *MLBDivision) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *MLBDivision) SetActive(v bool) {
	o.Active = &v
}

func (o MLBDivision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBDivision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Season) {
		toSerialize["season"] = o.Season
	}
	if !IsNil(o.NameShort) {
		toSerialize["nameShort"] = o.NameShort
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Abbreviation) {
		toSerialize["abbreviation"] = o.Abbreviation
	}
	if !IsNil(o.League) {
		toSerialize["league"] = o.League
	}
	if !IsNil(o.Sport) {
		toSerialize["sport"] = o.Sport
	}
	if !IsNil(o.HasWildcard) {
		toSerialize["hasWildcard"] = o.HasWildcard
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.NumPlayoffTeams) {
		toSerialize["numPlayoffTeams"] = o.NumPlayoffTeams
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

func (o *MLBDivision) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBDivision := _MLBDivision{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBDivision)

	if err != nil {
		return err
	}

	*o = MLBDivision(varMLBDivision)

	return err
}

type NullableMLBDivision struct {
	value *MLBDivision
	isSet bool
}

func (v NullableMLBDivision) Get() *MLBDivision {
	return v.value
}

func (v *NullableMLBDivision) Set(val *MLBDivision) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBDivision) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBDivision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBDivision(val *MLBDivision) *NullableMLBDivision {
	return &NullableMLBDivision{value: val, isSet: true}
}

func (v NullableMLBDivision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBDivision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


