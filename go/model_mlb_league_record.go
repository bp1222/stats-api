/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBLeagueRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBLeagueRecord{}

// MLBLeagueRecord struct for MLBLeagueRecord
type MLBLeagueRecord struct {
	Wins float32 `json:"wins"`
	Losses float32 `json:"losses"`
	Ties *float32 `json:"ties,omitempty"`
	Pct string `json:"pct"`
}

type _MLBLeagueRecord MLBLeagueRecord

// NewMLBLeagueRecord instantiates a new MLBLeagueRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBLeagueRecord(wins float32, losses float32, pct string) *MLBLeagueRecord {
	this := MLBLeagueRecord{}
	this.Wins = wins
	this.Losses = losses
	this.Pct = pct
	return &this
}

// NewMLBLeagueRecordWithDefaults instantiates a new MLBLeagueRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBLeagueRecordWithDefaults() *MLBLeagueRecord {
	this := MLBLeagueRecord{}
	return &this
}

// GetWins returns the Wins field value
func (o *MLBLeagueRecord) GetWins() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *MLBLeagueRecord) GetWinsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *MLBLeagueRecord) SetWins(v float32) {
	o.Wins = v
}

// GetLosses returns the Losses field value
func (o *MLBLeagueRecord) GetLosses() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Losses
}

// GetLossesOk returns a tuple with the Losses field value
// and a boolean to check if the value has been set.
func (o *MLBLeagueRecord) GetLossesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Losses, true
}

// SetLosses sets field value
func (o *MLBLeagueRecord) SetLosses(v float32) {
	o.Losses = v
}

// GetTies returns the Ties field value if set, zero value otherwise.
func (o *MLBLeagueRecord) GetTies() float32 {
	if o == nil || IsNil(o.Ties) {
		var ret float32
		return ret
	}
	return *o.Ties
}

// GetTiesOk returns a tuple with the Ties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeagueRecord) GetTiesOk() (*float32, bool) {
	if o == nil || IsNil(o.Ties) {
		return nil, false
	}
	return o.Ties, true
}

// HasTies returns a boolean if a field has been set.
func (o *MLBLeagueRecord) HasTies() bool {
	if o != nil && !IsNil(o.Ties) {
		return true
	}

	return false
}

// SetTies gets a reference to the given float32 and assigns it to the Ties field.
func (o *MLBLeagueRecord) SetTies(v float32) {
	o.Ties = &v
}

// GetPct returns the Pct field value
func (o *MLBLeagueRecord) GetPct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pct
}

// GetPctOk returns a tuple with the Pct field value
// and a boolean to check if the value has been set.
func (o *MLBLeagueRecord) GetPctOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pct, true
}

// SetPct sets field value
func (o *MLBLeagueRecord) SetPct(v string) {
	o.Pct = v
}

func (o MLBLeagueRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBLeagueRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wins"] = o.Wins
	toSerialize["losses"] = o.Losses
	if !IsNil(o.Ties) {
		toSerialize["ties"] = o.Ties
	}
	toSerialize["pct"] = o.Pct
	return toSerialize, nil
}

func (o *MLBLeagueRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wins",
		"losses",
		"pct",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBLeagueRecord := _MLBLeagueRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBLeagueRecord)

	if err != nil {
		return err
	}

	*o = MLBLeagueRecord(varMLBLeagueRecord)

	return err
}

type NullableMLBLeagueRecord struct {
	value *MLBLeagueRecord
	isSet bool
}

func (v NullableMLBLeagueRecord) Get() *MLBLeagueRecord {
	return v.value
}

func (v *NullableMLBLeagueRecord) Set(val *MLBLeagueRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBLeagueRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBLeagueRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBLeagueRecord(val *MLBLeagueRecord) *NullableMLBLeagueRecord {
	return &NullableMLBLeagueRecord{value: val, isSet: true}
}

func (v NullableMLBLeagueRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBLeagueRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


