/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBGameTeams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBGameTeams{}

// MLBGameTeams struct for MLBGameTeams
type MLBGameTeams struct {
	Away MLBGameTeam `json:"away"`
	Home MLBGameTeam `json:"home"`
}

type _MLBGameTeams MLBGameTeams

// NewMLBGameTeams instantiates a new MLBGameTeams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBGameTeams(away MLBGameTeam, home MLBGameTeam) *MLBGameTeams {
	this := MLBGameTeams{}
	this.Away = away
	this.Home = home
	return &this
}

// NewMLBGameTeamsWithDefaults instantiates a new MLBGameTeams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBGameTeamsWithDefaults() *MLBGameTeams {
	this := MLBGameTeams{}
	return &this
}

// GetAway returns the Away field value
func (o *MLBGameTeams) GetAway() MLBGameTeam {
	if o == nil {
		var ret MLBGameTeam
		return ret
	}

	return o.Away
}

// GetAwayOk returns a tuple with the Away field value
// and a boolean to check if the value has been set.
func (o *MLBGameTeams) GetAwayOk() (*MLBGameTeam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Away, true
}

// SetAway sets field value
func (o *MLBGameTeams) SetAway(v MLBGameTeam) {
	o.Away = v
}

// GetHome returns the Home field value
func (o *MLBGameTeams) GetHome() MLBGameTeam {
	if o == nil {
		var ret MLBGameTeam
		return ret
	}

	return o.Home
}

// GetHomeOk returns a tuple with the Home field value
// and a boolean to check if the value has been set.
func (o *MLBGameTeams) GetHomeOk() (*MLBGameTeam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Home, true
}

// SetHome sets field value
func (o *MLBGameTeams) SetHome(v MLBGameTeam) {
	o.Home = v
}

func (o MLBGameTeams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBGameTeams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["away"] = o.Away
	toSerialize["home"] = o.Home
	return toSerialize, nil
}

func (o *MLBGameTeams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"away",
		"home",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBGameTeams := _MLBGameTeams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBGameTeams)

	if err != nil {
		return err
	}

	*o = MLBGameTeams(varMLBGameTeams)

	return err
}

type NullableMLBGameTeams struct {
	value *MLBGameTeams
	isSet bool
}

func (v NullableMLBGameTeams) Get() *MLBGameTeams {
	return v.value
}

func (v *NullableMLBGameTeams) Set(val *MLBGameTeams) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBGameTeams) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBGameTeams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBGameTeams(val *MLBGameTeams) *NullableMLBGameTeams {
	return &NullableMLBGameTeams{value: val, isSet: true}
}

func (v NullableMLBGameTeams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBGameTeams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


