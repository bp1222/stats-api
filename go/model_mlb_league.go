/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBLeague type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBLeague{}

// MLBLeague League  
type MLBLeague struct {
	Id float32 `json:"id"`
	Name string `json:"name"`
	Link *string `json:"link,omitempty"`
	Abbreviation *string `json:"abbreviation,omitempty"`
	NameShort *string `json:"nameShort,omitempty"`
	SeasonState *string `json:"seasonState,omitempty"`
	HasWildCard *bool `json:"hasWildCard,omitempty"`
	HasSplitSeason *bool `json:"hasSplitSeason,omitempty"`
	HasPlayoffPoints *bool `json:"hasPlayoffPoints,omitempty"`
	SeasonDateInfo *MLBLeagueDates `json:"seasonDateInfo,omitempty"`
	Season *string `json:"season,omitempty"`
	OrgCode *string `json:"orgCode,omitempty"`
	ConferencesInUse *bool `json:"conferencesInUse,omitempty"`
	DivisionsInUse *bool `json:"divisionsInUse,omitempty"`
	SortOrder *float32 `json:"sortOrder,omitempty"`
	Active *bool `json:"active,omitempty"`
}

type _MLBLeague MLBLeague

// NewMLBLeague instantiates a new MLBLeague object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBLeague(id float32, name string) *MLBLeague {
	this := MLBLeague{}
	this.Id = id
	this.Name = name
	return &this
}

// NewMLBLeagueWithDefaults instantiates a new MLBLeague object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBLeagueWithDefaults() *MLBLeague {
	this := MLBLeague{}
	return &this
}

// GetId returns the Id field value
func (o *MLBLeague) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MLBLeague) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MLBLeague) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MLBLeague) SetName(v string) {
	o.Name = v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *MLBLeague) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *MLBLeague) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *MLBLeague) SetLink(v string) {
	o.Link = &v
}

// GetAbbreviation returns the Abbreviation field value if set, zero value otherwise.
func (o *MLBLeague) GetAbbreviation() string {
	if o == nil || IsNil(o.Abbreviation) {
		var ret string
		return ret
	}
	return *o.Abbreviation
}

// GetAbbreviationOk returns a tuple with the Abbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.Abbreviation) {
		return nil, false
	}
	return o.Abbreviation, true
}

// HasAbbreviation returns a boolean if a field has been set.
func (o *MLBLeague) HasAbbreviation() bool {
	if o != nil && !IsNil(o.Abbreviation) {
		return true
	}

	return false
}

// SetAbbreviation gets a reference to the given string and assigns it to the Abbreviation field.
func (o *MLBLeague) SetAbbreviation(v string) {
	o.Abbreviation = &v
}

// GetNameShort returns the NameShort field value if set, zero value otherwise.
func (o *MLBLeague) GetNameShort() string {
	if o == nil || IsNil(o.NameShort) {
		var ret string
		return ret
	}
	return *o.NameShort
}

// GetNameShortOk returns a tuple with the NameShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetNameShortOk() (*string, bool) {
	if o == nil || IsNil(o.NameShort) {
		return nil, false
	}
	return o.NameShort, true
}

// HasNameShort returns a boolean if a field has been set.
func (o *MLBLeague) HasNameShort() bool {
	if o != nil && !IsNil(o.NameShort) {
		return true
	}

	return false
}

// SetNameShort gets a reference to the given string and assigns it to the NameShort field.
func (o *MLBLeague) SetNameShort(v string) {
	o.NameShort = &v
}

// GetSeasonState returns the SeasonState field value if set, zero value otherwise.
func (o *MLBLeague) GetSeasonState() string {
	if o == nil || IsNil(o.SeasonState) {
		var ret string
		return ret
	}
	return *o.SeasonState
}

// GetSeasonStateOk returns a tuple with the SeasonState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetSeasonStateOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonState) {
		return nil, false
	}
	return o.SeasonState, true
}

// HasSeasonState returns a boolean if a field has been set.
func (o *MLBLeague) HasSeasonState() bool {
	if o != nil && !IsNil(o.SeasonState) {
		return true
	}

	return false
}

// SetSeasonState gets a reference to the given string and assigns it to the SeasonState field.
func (o *MLBLeague) SetSeasonState(v string) {
	o.SeasonState = &v
}

// GetHasWildCard returns the HasWildCard field value if set, zero value otherwise.
func (o *MLBLeague) GetHasWildCard() bool {
	if o == nil || IsNil(o.HasWildCard) {
		var ret bool
		return ret
	}
	return *o.HasWildCard
}

// GetHasWildCardOk returns a tuple with the HasWildCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetHasWildCardOk() (*bool, bool) {
	if o == nil || IsNil(o.HasWildCard) {
		return nil, false
	}
	return o.HasWildCard, true
}

// HasHasWildCard returns a boolean if a field has been set.
func (o *MLBLeague) HasHasWildCard() bool {
	if o != nil && !IsNil(o.HasWildCard) {
		return true
	}

	return false
}

// SetHasWildCard gets a reference to the given bool and assigns it to the HasWildCard field.
func (o *MLBLeague) SetHasWildCard(v bool) {
	o.HasWildCard = &v
}

// GetHasSplitSeason returns the HasSplitSeason field value if set, zero value otherwise.
func (o *MLBLeague) GetHasSplitSeason() bool {
	if o == nil || IsNil(o.HasSplitSeason) {
		var ret bool
		return ret
	}
	return *o.HasSplitSeason
}

// GetHasSplitSeasonOk returns a tuple with the HasSplitSeason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetHasSplitSeasonOk() (*bool, bool) {
	if o == nil || IsNil(o.HasSplitSeason) {
		return nil, false
	}
	return o.HasSplitSeason, true
}

// HasHasSplitSeason returns a boolean if a field has been set.
func (o *MLBLeague) HasHasSplitSeason() bool {
	if o != nil && !IsNil(o.HasSplitSeason) {
		return true
	}

	return false
}

// SetHasSplitSeason gets a reference to the given bool and assigns it to the HasSplitSeason field.
func (o *MLBLeague) SetHasSplitSeason(v bool) {
	o.HasSplitSeason = &v
}

// GetHasPlayoffPoints returns the HasPlayoffPoints field value if set, zero value otherwise.
func (o *MLBLeague) GetHasPlayoffPoints() bool {
	if o == nil || IsNil(o.HasPlayoffPoints) {
		var ret bool
		return ret
	}
	return *o.HasPlayoffPoints
}

// GetHasPlayoffPointsOk returns a tuple with the HasPlayoffPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetHasPlayoffPointsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPlayoffPoints) {
		return nil, false
	}
	return o.HasPlayoffPoints, true
}

// HasHasPlayoffPoints returns a boolean if a field has been set.
func (o *MLBLeague) HasHasPlayoffPoints() bool {
	if o != nil && !IsNil(o.HasPlayoffPoints) {
		return true
	}

	return false
}

// SetHasPlayoffPoints gets a reference to the given bool and assigns it to the HasPlayoffPoints field.
func (o *MLBLeague) SetHasPlayoffPoints(v bool) {
	o.HasPlayoffPoints = &v
}

// GetSeasonDateInfo returns the SeasonDateInfo field value if set, zero value otherwise.
func (o *MLBLeague) GetSeasonDateInfo() MLBLeagueDates {
	if o == nil || IsNil(o.SeasonDateInfo) {
		var ret MLBLeagueDates
		return ret
	}
	return *o.SeasonDateInfo
}

// GetSeasonDateInfoOk returns a tuple with the SeasonDateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetSeasonDateInfoOk() (*MLBLeagueDates, bool) {
	if o == nil || IsNil(o.SeasonDateInfo) {
		return nil, false
	}
	return o.SeasonDateInfo, true
}

// HasSeasonDateInfo returns a boolean if a field has been set.
func (o *MLBLeague) HasSeasonDateInfo() bool {
	if o != nil && !IsNil(o.SeasonDateInfo) {
		return true
	}

	return false
}

// SetSeasonDateInfo gets a reference to the given MLBLeagueDates and assigns it to the SeasonDateInfo field.
func (o *MLBLeague) SetSeasonDateInfo(v MLBLeagueDates) {
	o.SeasonDateInfo = &v
}

// GetSeason returns the Season field value if set, zero value otherwise.
func (o *MLBLeague) GetSeason() string {
	if o == nil || IsNil(o.Season) {
		var ret string
		return ret
	}
	return *o.Season
}

// GetSeasonOk returns a tuple with the Season field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetSeasonOk() (*string, bool) {
	if o == nil || IsNil(o.Season) {
		return nil, false
	}
	return o.Season, true
}

// HasSeason returns a boolean if a field has been set.
func (o *MLBLeague) HasSeason() bool {
	if o != nil && !IsNil(o.Season) {
		return true
	}

	return false
}

// SetSeason gets a reference to the given string and assigns it to the Season field.
func (o *MLBLeague) SetSeason(v string) {
	o.Season = &v
}

// GetOrgCode returns the OrgCode field value if set, zero value otherwise.
func (o *MLBLeague) GetOrgCode() string {
	if o == nil || IsNil(o.OrgCode) {
		var ret string
		return ret
	}
	return *o.OrgCode
}

// GetOrgCodeOk returns a tuple with the OrgCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetOrgCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OrgCode) {
		return nil, false
	}
	return o.OrgCode, true
}

// HasOrgCode returns a boolean if a field has been set.
func (o *MLBLeague) HasOrgCode() bool {
	if o != nil && !IsNil(o.OrgCode) {
		return true
	}

	return false
}

// SetOrgCode gets a reference to the given string and assigns it to the OrgCode field.
func (o *MLBLeague) SetOrgCode(v string) {
	o.OrgCode = &v
}

// GetConferencesInUse returns the ConferencesInUse field value if set, zero value otherwise.
func (o *MLBLeague) GetConferencesInUse() bool {
	if o == nil || IsNil(o.ConferencesInUse) {
		var ret bool
		return ret
	}
	return *o.ConferencesInUse
}

// GetConferencesInUseOk returns a tuple with the ConferencesInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetConferencesInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.ConferencesInUse) {
		return nil, false
	}
	return o.ConferencesInUse, true
}

// HasConferencesInUse returns a boolean if a field has been set.
func (o *MLBLeague) HasConferencesInUse() bool {
	if o != nil && !IsNil(o.ConferencesInUse) {
		return true
	}

	return false
}

// SetConferencesInUse gets a reference to the given bool and assigns it to the ConferencesInUse field.
func (o *MLBLeague) SetConferencesInUse(v bool) {
	o.ConferencesInUse = &v
}

// GetDivisionsInUse returns the DivisionsInUse field value if set, zero value otherwise.
func (o *MLBLeague) GetDivisionsInUse() bool {
	if o == nil || IsNil(o.DivisionsInUse) {
		var ret bool
		return ret
	}
	return *o.DivisionsInUse
}

// GetDivisionsInUseOk returns a tuple with the DivisionsInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetDivisionsInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.DivisionsInUse) {
		return nil, false
	}
	return o.DivisionsInUse, true
}

// HasDivisionsInUse returns a boolean if a field has been set.
func (o *MLBLeague) HasDivisionsInUse() bool {
	if o != nil && !IsNil(o.DivisionsInUse) {
		return true
	}

	return false
}

// SetDivisionsInUse gets a reference to the given bool and assigns it to the DivisionsInUse field.
func (o *MLBLeague) SetDivisionsInUse(v bool) {
	o.DivisionsInUse = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *MLBLeague) GetSortOrder() float32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret float32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetSortOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *MLBLeague) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given float32 and assigns it to the SortOrder field.
func (o *MLBLeague) SetSortOrder(v float32) {
	o.SortOrder = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *MLBLeague) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBLeague) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *MLBLeague) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *MLBLeague) SetActive(v bool) {
	o.Active = &v
}

func (o MLBLeague) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBLeague) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Abbreviation) {
		toSerialize["abbreviation"] = o.Abbreviation
	}
	if !IsNil(o.NameShort) {
		toSerialize["nameShort"] = o.NameShort
	}
	if !IsNil(o.SeasonState) {
		toSerialize["seasonState"] = o.SeasonState
	}
	if !IsNil(o.HasWildCard) {
		toSerialize["hasWildCard"] = o.HasWildCard
	}
	if !IsNil(o.HasSplitSeason) {
		toSerialize["hasSplitSeason"] = o.HasSplitSeason
	}
	if !IsNil(o.HasPlayoffPoints) {
		toSerialize["hasPlayoffPoints"] = o.HasPlayoffPoints
	}
	if !IsNil(o.SeasonDateInfo) {
		toSerialize["seasonDateInfo"] = o.SeasonDateInfo
	}
	if !IsNil(o.Season) {
		toSerialize["season"] = o.Season
	}
	if !IsNil(o.OrgCode) {
		toSerialize["orgCode"] = o.OrgCode
	}
	if !IsNil(o.ConferencesInUse) {
		toSerialize["conferencesInUse"] = o.ConferencesInUse
	}
	if !IsNil(o.DivisionsInUse) {
		toSerialize["divisionsInUse"] = o.DivisionsInUse
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

func (o *MLBLeague) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBLeague := _MLBLeague{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBLeague)

	if err != nil {
		return err
	}

	*o = MLBLeague(varMLBLeague)

	return err
}

type NullableMLBLeague struct {
	value *MLBLeague
	isSet bool
}

func (v NullableMLBLeague) Get() *MLBLeague {
	return v.value
}

func (v *NullableMLBLeague) Set(val *MLBLeague) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBLeague) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBLeague) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBLeague(val *MLBLeague) *NullableMLBLeague {
	return &NullableMLBLeague{value: val, isSet: true}
}

func (v NullableMLBLeague) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBLeague) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


