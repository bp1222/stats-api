/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
)

// checks if the MLBSeasons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBSeasons{}

// MLBSeasons struct for MLBSeasons
type MLBSeasons struct {
	Seasons []MLBSeason `json:"seasons,omitempty"`
}

// NewMLBSeasons instantiates a new MLBSeasons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBSeasons() *MLBSeasons {
	this := MLBSeasons{}
	return &this
}

// NewMLBSeasonsWithDefaults instantiates a new MLBSeasons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBSeasonsWithDefaults() *MLBSeasons {
	this := MLBSeasons{}
	return &this
}

// GetSeasons returns the Seasons field value if set, zero value otherwise.
func (o *MLBSeasons) GetSeasons() []MLBSeason {
	if o == nil || IsNil(o.Seasons) {
		var ret []MLBSeason
		return ret
	}
	return o.Seasons
}

// GetSeasonsOk returns a tuple with the Seasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeasons) GetSeasonsOk() ([]MLBSeason, bool) {
	if o == nil || IsNil(o.Seasons) {
		return nil, false
	}
	return o.Seasons, true
}

// HasSeasons returns a boolean if a field has been set.
func (o *MLBSeasons) HasSeasons() bool {
	if o != nil && !IsNil(o.Seasons) {
		return true
	}

	return false
}

// SetSeasons gets a reference to the given []MLBSeason and assigns it to the Seasons field.
func (o *MLBSeasons) SetSeasons(v []MLBSeason) {
	o.Seasons = v
}

func (o MLBSeasons) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBSeasons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Seasons) {
		toSerialize["seasons"] = o.Seasons
	}
	return toSerialize, nil
}

type NullableMLBSeasons struct {
	value *MLBSeasons
	isSet bool
}

func (v NullableMLBSeasons) Get() *MLBSeasons {
	return v.value
}

func (v *NullableMLBSeasons) Set(val *MLBSeasons) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBSeasons) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBSeasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBSeasons(val *MLBSeasons) *NullableMLBSeasons {
	return &NullableMLBSeasons{value: val, isSet: true}
}

func (v NullableMLBSeasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBSeasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


