/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBRecord{}

// MLBRecord Record 
type MLBRecord struct {
	Team MLBTeam `json:"team"`
	Season string `json:"season"`
	Streak MLBStreak `json:"streak"`
	DivisionRank string `json:"divisionRank"`
	LeagueRank string `json:"leagueRank"`
	SportRank *string `json:"sportRank,omitempty"`
	GamesPlayed *float32 `json:"gamesPlayed,omitempty"`
	GamesBack string `json:"gamesBack"`
	WildCardGamesBack *string `json:"wildCardGamesBack,omitempty"`
	LeagueGamesBack *string `json:"leagueGamesBack,omitempty"`
	SportGamesBack *string `json:"sportGamesBack,omitempty"`
	DivisionGamesBack *string `json:"divisionGamesBack,omitempty"`
	ConferenceGamesBack *string `json:"conferenceGamesBack,omitempty"`
	LeagueRecord MLBLeagueRecord `json:"leagueRecord"`
	LastUpdated *string `json:"lastUpdated,omitempty"`
	RunsAllowed *float32 `json:"runsAllowed,omitempty"`
	RunsScored *float32 `json:"runsScored,omitempty"`
	DivisionChamp *bool `json:"divisionChamp,omitempty"`
	DivisionLeader *bool `json:"divisionLeader,omitempty"`
	HasWildcard *bool `json:"hasWildcard,omitempty"`
	Clinched *bool `json:"clinched,omitempty"`
	EliminationNumber *string `json:"eliminationNumber,omitempty"`
	EliminationNumberSport *string `json:"eliminationNumberSport,omitempty"`
	EliminationNumberLeague *string `json:"eliminationNumberLeague,omitempty"`
	EliminationNumberDivision *string `json:"eliminationNumberDivision,omitempty"`
	EliminationNumberConference *string `json:"eliminationNumberConference,omitempty"`
	WildCardEliminationNumber *string `json:"wildCardEliminationNumber,omitempty"`
	MagicNumber *string `json:"magicNumber,omitempty"`
	Wins float32 `json:"wins"`
	Losses float32 `json:"losses"`
	RunDifferential *float32 `json:"runDifferential,omitempty"`
	WinningPercentage *string `json:"winningPercentage,omitempty"`
}

type _MLBRecord MLBRecord

// NewMLBRecord instantiates a new MLBRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBRecord(team MLBTeam, season string, streak MLBStreak, divisionRank string, leagueRank string, gamesBack string, leagueRecord MLBLeagueRecord, wins float32, losses float32) *MLBRecord {
	this := MLBRecord{}
	this.Team = team
	this.Season = season
	this.Streak = streak
	this.DivisionRank = divisionRank
	this.LeagueRank = leagueRank
	this.GamesBack = gamesBack
	this.LeagueRecord = leagueRecord
	this.Wins = wins
	this.Losses = losses
	return &this
}

// NewMLBRecordWithDefaults instantiates a new MLBRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBRecordWithDefaults() *MLBRecord {
	this := MLBRecord{}
	return &this
}

// GetTeam returns the Team field value
func (o *MLBRecord) GetTeam() MLBTeam {
	if o == nil {
		var ret MLBTeam
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetTeamOk() (*MLBTeam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *MLBRecord) SetTeam(v MLBTeam) {
	o.Team = v
}

// GetSeason returns the Season field value
func (o *MLBRecord) GetSeason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetSeasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *MLBRecord) SetSeason(v string) {
	o.Season = v
}

// GetStreak returns the Streak field value
func (o *MLBRecord) GetStreak() MLBStreak {
	if o == nil {
		var ret MLBStreak
		return ret
	}

	return o.Streak
}

// GetStreakOk returns a tuple with the Streak field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetStreakOk() (*MLBStreak, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Streak, true
}

// SetStreak sets field value
func (o *MLBRecord) SetStreak(v MLBStreak) {
	o.Streak = v
}

// GetDivisionRank returns the DivisionRank field value
func (o *MLBRecord) GetDivisionRank() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DivisionRank
}

// GetDivisionRankOk returns a tuple with the DivisionRank field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetDivisionRankOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionRank, true
}

// SetDivisionRank sets field value
func (o *MLBRecord) SetDivisionRank(v string) {
	o.DivisionRank = v
}

// GetLeagueRank returns the LeagueRank field value
func (o *MLBRecord) GetLeagueRank() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LeagueRank
}

// GetLeagueRankOk returns a tuple with the LeagueRank field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetLeagueRankOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeagueRank, true
}

// SetLeagueRank sets field value
func (o *MLBRecord) SetLeagueRank(v string) {
	o.LeagueRank = v
}

// GetSportRank returns the SportRank field value if set, zero value otherwise.
func (o *MLBRecord) GetSportRank() string {
	if o == nil || IsNil(o.SportRank) {
		var ret string
		return ret
	}
	return *o.SportRank
}

// GetSportRankOk returns a tuple with the SportRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetSportRankOk() (*string, bool) {
	if o == nil || IsNil(o.SportRank) {
		return nil, false
	}
	return o.SportRank, true
}

// HasSportRank returns a boolean if a field has been set.
func (o *MLBRecord) HasSportRank() bool {
	if o != nil && !IsNil(o.SportRank) {
		return true
	}

	return false
}

// SetSportRank gets a reference to the given string and assigns it to the SportRank field.
func (o *MLBRecord) SetSportRank(v string) {
	o.SportRank = &v
}

// GetGamesPlayed returns the GamesPlayed field value if set, zero value otherwise.
func (o *MLBRecord) GetGamesPlayed() float32 {
	if o == nil || IsNil(o.GamesPlayed) {
		var ret float32
		return ret
	}
	return *o.GamesPlayed
}

// GetGamesPlayedOk returns a tuple with the GamesPlayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetGamesPlayedOk() (*float32, bool) {
	if o == nil || IsNil(o.GamesPlayed) {
		return nil, false
	}
	return o.GamesPlayed, true
}

// HasGamesPlayed returns a boolean if a field has been set.
func (o *MLBRecord) HasGamesPlayed() bool {
	if o != nil && !IsNil(o.GamesPlayed) {
		return true
	}

	return false
}

// SetGamesPlayed gets a reference to the given float32 and assigns it to the GamesPlayed field.
func (o *MLBRecord) SetGamesPlayed(v float32) {
	o.GamesPlayed = &v
}

// GetGamesBack returns the GamesBack field value
func (o *MLBRecord) GetGamesBack() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GamesBack
}

// GetGamesBackOk returns a tuple with the GamesBack field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetGamesBackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GamesBack, true
}

// SetGamesBack sets field value
func (o *MLBRecord) SetGamesBack(v string) {
	o.GamesBack = v
}

// GetWildCardGamesBack returns the WildCardGamesBack field value if set, zero value otherwise.
func (o *MLBRecord) GetWildCardGamesBack() string {
	if o == nil || IsNil(o.WildCardGamesBack) {
		var ret string
		return ret
	}
	return *o.WildCardGamesBack
}

// GetWildCardGamesBackOk returns a tuple with the WildCardGamesBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetWildCardGamesBackOk() (*string, bool) {
	if o == nil || IsNil(o.WildCardGamesBack) {
		return nil, false
	}
	return o.WildCardGamesBack, true
}

// HasWildCardGamesBack returns a boolean if a field has been set.
func (o *MLBRecord) HasWildCardGamesBack() bool {
	if o != nil && !IsNil(o.WildCardGamesBack) {
		return true
	}

	return false
}

// SetWildCardGamesBack gets a reference to the given string and assigns it to the WildCardGamesBack field.
func (o *MLBRecord) SetWildCardGamesBack(v string) {
	o.WildCardGamesBack = &v
}

// GetLeagueGamesBack returns the LeagueGamesBack field value if set, zero value otherwise.
func (o *MLBRecord) GetLeagueGamesBack() string {
	if o == nil || IsNil(o.LeagueGamesBack) {
		var ret string
		return ret
	}
	return *o.LeagueGamesBack
}

// GetLeagueGamesBackOk returns a tuple with the LeagueGamesBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetLeagueGamesBackOk() (*string, bool) {
	if o == nil || IsNil(o.LeagueGamesBack) {
		return nil, false
	}
	return o.LeagueGamesBack, true
}

// HasLeagueGamesBack returns a boolean if a field has been set.
func (o *MLBRecord) HasLeagueGamesBack() bool {
	if o != nil && !IsNil(o.LeagueGamesBack) {
		return true
	}

	return false
}

// SetLeagueGamesBack gets a reference to the given string and assigns it to the LeagueGamesBack field.
func (o *MLBRecord) SetLeagueGamesBack(v string) {
	o.LeagueGamesBack = &v
}

// GetSportGamesBack returns the SportGamesBack field value if set, zero value otherwise.
func (o *MLBRecord) GetSportGamesBack() string {
	if o == nil || IsNil(o.SportGamesBack) {
		var ret string
		return ret
	}
	return *o.SportGamesBack
}

// GetSportGamesBackOk returns a tuple with the SportGamesBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetSportGamesBackOk() (*string, bool) {
	if o == nil || IsNil(o.SportGamesBack) {
		return nil, false
	}
	return o.SportGamesBack, true
}

// HasSportGamesBack returns a boolean if a field has been set.
func (o *MLBRecord) HasSportGamesBack() bool {
	if o != nil && !IsNil(o.SportGamesBack) {
		return true
	}

	return false
}

// SetSportGamesBack gets a reference to the given string and assigns it to the SportGamesBack field.
func (o *MLBRecord) SetSportGamesBack(v string) {
	o.SportGamesBack = &v
}

// GetDivisionGamesBack returns the DivisionGamesBack field value if set, zero value otherwise.
func (o *MLBRecord) GetDivisionGamesBack() string {
	if o == nil || IsNil(o.DivisionGamesBack) {
		var ret string
		return ret
	}
	return *o.DivisionGamesBack
}

// GetDivisionGamesBackOk returns a tuple with the DivisionGamesBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetDivisionGamesBackOk() (*string, bool) {
	if o == nil || IsNil(o.DivisionGamesBack) {
		return nil, false
	}
	return o.DivisionGamesBack, true
}

// HasDivisionGamesBack returns a boolean if a field has been set.
func (o *MLBRecord) HasDivisionGamesBack() bool {
	if o != nil && !IsNil(o.DivisionGamesBack) {
		return true
	}

	return false
}

// SetDivisionGamesBack gets a reference to the given string and assigns it to the DivisionGamesBack field.
func (o *MLBRecord) SetDivisionGamesBack(v string) {
	o.DivisionGamesBack = &v
}

// GetConferenceGamesBack returns the ConferenceGamesBack field value if set, zero value otherwise.
func (o *MLBRecord) GetConferenceGamesBack() string {
	if o == nil || IsNil(o.ConferenceGamesBack) {
		var ret string
		return ret
	}
	return *o.ConferenceGamesBack
}

// GetConferenceGamesBackOk returns a tuple with the ConferenceGamesBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetConferenceGamesBackOk() (*string, bool) {
	if o == nil || IsNil(o.ConferenceGamesBack) {
		return nil, false
	}
	return o.ConferenceGamesBack, true
}

// HasConferenceGamesBack returns a boolean if a field has been set.
func (o *MLBRecord) HasConferenceGamesBack() bool {
	if o != nil && !IsNil(o.ConferenceGamesBack) {
		return true
	}

	return false
}

// SetConferenceGamesBack gets a reference to the given string and assigns it to the ConferenceGamesBack field.
func (o *MLBRecord) SetConferenceGamesBack(v string) {
	o.ConferenceGamesBack = &v
}

// GetLeagueRecord returns the LeagueRecord field value
func (o *MLBRecord) GetLeagueRecord() MLBLeagueRecord {
	if o == nil {
		var ret MLBLeagueRecord
		return ret
	}

	return o.LeagueRecord
}

// GetLeagueRecordOk returns a tuple with the LeagueRecord field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetLeagueRecordOk() (*MLBLeagueRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeagueRecord, true
}

// SetLeagueRecord sets field value
func (o *MLBRecord) SetLeagueRecord(v MLBLeagueRecord) {
	o.LeagueRecord = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *MLBRecord) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *MLBRecord) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *MLBRecord) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetRunsAllowed returns the RunsAllowed field value if set, zero value otherwise.
func (o *MLBRecord) GetRunsAllowed() float32 {
	if o == nil || IsNil(o.RunsAllowed) {
		var ret float32
		return ret
	}
	return *o.RunsAllowed
}

// GetRunsAllowedOk returns a tuple with the RunsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetRunsAllowedOk() (*float32, bool) {
	if o == nil || IsNil(o.RunsAllowed) {
		return nil, false
	}
	return o.RunsAllowed, true
}

// HasRunsAllowed returns a boolean if a field has been set.
func (o *MLBRecord) HasRunsAllowed() bool {
	if o != nil && !IsNil(o.RunsAllowed) {
		return true
	}

	return false
}

// SetRunsAllowed gets a reference to the given float32 and assigns it to the RunsAllowed field.
func (o *MLBRecord) SetRunsAllowed(v float32) {
	o.RunsAllowed = &v
}

// GetRunsScored returns the RunsScored field value if set, zero value otherwise.
func (o *MLBRecord) GetRunsScored() float32 {
	if o == nil || IsNil(o.RunsScored) {
		var ret float32
		return ret
	}
	return *o.RunsScored
}

// GetRunsScoredOk returns a tuple with the RunsScored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetRunsScoredOk() (*float32, bool) {
	if o == nil || IsNil(o.RunsScored) {
		return nil, false
	}
	return o.RunsScored, true
}

// HasRunsScored returns a boolean if a field has been set.
func (o *MLBRecord) HasRunsScored() bool {
	if o != nil && !IsNil(o.RunsScored) {
		return true
	}

	return false
}

// SetRunsScored gets a reference to the given float32 and assigns it to the RunsScored field.
func (o *MLBRecord) SetRunsScored(v float32) {
	o.RunsScored = &v
}

// GetDivisionChamp returns the DivisionChamp field value if set, zero value otherwise.
func (o *MLBRecord) GetDivisionChamp() bool {
	if o == nil || IsNil(o.DivisionChamp) {
		var ret bool
		return ret
	}
	return *o.DivisionChamp
}

// GetDivisionChampOk returns a tuple with the DivisionChamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetDivisionChampOk() (*bool, bool) {
	if o == nil || IsNil(o.DivisionChamp) {
		return nil, false
	}
	return o.DivisionChamp, true
}

// HasDivisionChamp returns a boolean if a field has been set.
func (o *MLBRecord) HasDivisionChamp() bool {
	if o != nil && !IsNil(o.DivisionChamp) {
		return true
	}

	return false
}

// SetDivisionChamp gets a reference to the given bool and assigns it to the DivisionChamp field.
func (o *MLBRecord) SetDivisionChamp(v bool) {
	o.DivisionChamp = &v
}

// GetDivisionLeader returns the DivisionLeader field value if set, zero value otherwise.
func (o *MLBRecord) GetDivisionLeader() bool {
	if o == nil || IsNil(o.DivisionLeader) {
		var ret bool
		return ret
	}
	return *o.DivisionLeader
}

// GetDivisionLeaderOk returns a tuple with the DivisionLeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetDivisionLeaderOk() (*bool, bool) {
	if o == nil || IsNil(o.DivisionLeader) {
		return nil, false
	}
	return o.DivisionLeader, true
}

// HasDivisionLeader returns a boolean if a field has been set.
func (o *MLBRecord) HasDivisionLeader() bool {
	if o != nil && !IsNil(o.DivisionLeader) {
		return true
	}

	return false
}

// SetDivisionLeader gets a reference to the given bool and assigns it to the DivisionLeader field.
func (o *MLBRecord) SetDivisionLeader(v bool) {
	o.DivisionLeader = &v
}

// GetHasWildcard returns the HasWildcard field value if set, zero value otherwise.
func (o *MLBRecord) GetHasWildcard() bool {
	if o == nil || IsNil(o.HasWildcard) {
		var ret bool
		return ret
	}
	return *o.HasWildcard
}

// GetHasWildcardOk returns a tuple with the HasWildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetHasWildcardOk() (*bool, bool) {
	if o == nil || IsNil(o.HasWildcard) {
		return nil, false
	}
	return o.HasWildcard, true
}

// HasHasWildcard returns a boolean if a field has been set.
func (o *MLBRecord) HasHasWildcard() bool {
	if o != nil && !IsNil(o.HasWildcard) {
		return true
	}

	return false
}

// SetHasWildcard gets a reference to the given bool and assigns it to the HasWildcard field.
func (o *MLBRecord) SetHasWildcard(v bool) {
	o.HasWildcard = &v
}

// GetClinched returns the Clinched field value if set, zero value otherwise.
func (o *MLBRecord) GetClinched() bool {
	if o == nil || IsNil(o.Clinched) {
		var ret bool
		return ret
	}
	return *o.Clinched
}

// GetClinchedOk returns a tuple with the Clinched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetClinchedOk() (*bool, bool) {
	if o == nil || IsNil(o.Clinched) {
		return nil, false
	}
	return o.Clinched, true
}

// HasClinched returns a boolean if a field has been set.
func (o *MLBRecord) HasClinched() bool {
	if o != nil && !IsNil(o.Clinched) {
		return true
	}

	return false
}

// SetClinched gets a reference to the given bool and assigns it to the Clinched field.
func (o *MLBRecord) SetClinched(v bool) {
	o.Clinched = &v
}

// GetEliminationNumber returns the EliminationNumber field value if set, zero value otherwise.
func (o *MLBRecord) GetEliminationNumber() string {
	if o == nil || IsNil(o.EliminationNumber) {
		var ret string
		return ret
	}
	return *o.EliminationNumber
}

// GetEliminationNumberOk returns a tuple with the EliminationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetEliminationNumberOk() (*string, bool) {
	if o == nil || IsNil(o.EliminationNumber) {
		return nil, false
	}
	return o.EliminationNumber, true
}

// HasEliminationNumber returns a boolean if a field has been set.
func (o *MLBRecord) HasEliminationNumber() bool {
	if o != nil && !IsNil(o.EliminationNumber) {
		return true
	}

	return false
}

// SetEliminationNumber gets a reference to the given string and assigns it to the EliminationNumber field.
func (o *MLBRecord) SetEliminationNumber(v string) {
	o.EliminationNumber = &v
}

// GetEliminationNumberSport returns the EliminationNumberSport field value if set, zero value otherwise.
func (o *MLBRecord) GetEliminationNumberSport() string {
	if o == nil || IsNil(o.EliminationNumberSport) {
		var ret string
		return ret
	}
	return *o.EliminationNumberSport
}

// GetEliminationNumberSportOk returns a tuple with the EliminationNumberSport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetEliminationNumberSportOk() (*string, bool) {
	if o == nil || IsNil(o.EliminationNumberSport) {
		return nil, false
	}
	return o.EliminationNumberSport, true
}

// HasEliminationNumberSport returns a boolean if a field has been set.
func (o *MLBRecord) HasEliminationNumberSport() bool {
	if o != nil && !IsNil(o.EliminationNumberSport) {
		return true
	}

	return false
}

// SetEliminationNumberSport gets a reference to the given string and assigns it to the EliminationNumberSport field.
func (o *MLBRecord) SetEliminationNumberSport(v string) {
	o.EliminationNumberSport = &v
}

// GetEliminationNumberLeague returns the EliminationNumberLeague field value if set, zero value otherwise.
func (o *MLBRecord) GetEliminationNumberLeague() string {
	if o == nil || IsNil(o.EliminationNumberLeague) {
		var ret string
		return ret
	}
	return *o.EliminationNumberLeague
}

// GetEliminationNumberLeagueOk returns a tuple with the EliminationNumberLeague field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetEliminationNumberLeagueOk() (*string, bool) {
	if o == nil || IsNil(o.EliminationNumberLeague) {
		return nil, false
	}
	return o.EliminationNumberLeague, true
}

// HasEliminationNumberLeague returns a boolean if a field has been set.
func (o *MLBRecord) HasEliminationNumberLeague() bool {
	if o != nil && !IsNil(o.EliminationNumberLeague) {
		return true
	}

	return false
}

// SetEliminationNumberLeague gets a reference to the given string and assigns it to the EliminationNumberLeague field.
func (o *MLBRecord) SetEliminationNumberLeague(v string) {
	o.EliminationNumberLeague = &v
}

// GetEliminationNumberDivision returns the EliminationNumberDivision field value if set, zero value otherwise.
func (o *MLBRecord) GetEliminationNumberDivision() string {
	if o == nil || IsNil(o.EliminationNumberDivision) {
		var ret string
		return ret
	}
	return *o.EliminationNumberDivision
}

// GetEliminationNumberDivisionOk returns a tuple with the EliminationNumberDivision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetEliminationNumberDivisionOk() (*string, bool) {
	if o == nil || IsNil(o.EliminationNumberDivision) {
		return nil, false
	}
	return o.EliminationNumberDivision, true
}

// HasEliminationNumberDivision returns a boolean if a field has been set.
func (o *MLBRecord) HasEliminationNumberDivision() bool {
	if o != nil && !IsNil(o.EliminationNumberDivision) {
		return true
	}

	return false
}

// SetEliminationNumberDivision gets a reference to the given string and assigns it to the EliminationNumberDivision field.
func (o *MLBRecord) SetEliminationNumberDivision(v string) {
	o.EliminationNumberDivision = &v
}

// GetEliminationNumberConference returns the EliminationNumberConference field value if set, zero value otherwise.
func (o *MLBRecord) GetEliminationNumberConference() string {
	if o == nil || IsNil(o.EliminationNumberConference) {
		var ret string
		return ret
	}
	return *o.EliminationNumberConference
}

// GetEliminationNumberConferenceOk returns a tuple with the EliminationNumberConference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetEliminationNumberConferenceOk() (*string, bool) {
	if o == nil || IsNil(o.EliminationNumberConference) {
		return nil, false
	}
	return o.EliminationNumberConference, true
}

// HasEliminationNumberConference returns a boolean if a field has been set.
func (o *MLBRecord) HasEliminationNumberConference() bool {
	if o != nil && !IsNil(o.EliminationNumberConference) {
		return true
	}

	return false
}

// SetEliminationNumberConference gets a reference to the given string and assigns it to the EliminationNumberConference field.
func (o *MLBRecord) SetEliminationNumberConference(v string) {
	o.EliminationNumberConference = &v
}

// GetWildCardEliminationNumber returns the WildCardEliminationNumber field value if set, zero value otherwise.
func (o *MLBRecord) GetWildCardEliminationNumber() string {
	if o == nil || IsNil(o.WildCardEliminationNumber) {
		var ret string
		return ret
	}
	return *o.WildCardEliminationNumber
}

// GetWildCardEliminationNumberOk returns a tuple with the WildCardEliminationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetWildCardEliminationNumberOk() (*string, bool) {
	if o == nil || IsNil(o.WildCardEliminationNumber) {
		return nil, false
	}
	return o.WildCardEliminationNumber, true
}

// HasWildCardEliminationNumber returns a boolean if a field has been set.
func (o *MLBRecord) HasWildCardEliminationNumber() bool {
	if o != nil && !IsNil(o.WildCardEliminationNumber) {
		return true
	}

	return false
}

// SetWildCardEliminationNumber gets a reference to the given string and assigns it to the WildCardEliminationNumber field.
func (o *MLBRecord) SetWildCardEliminationNumber(v string) {
	o.WildCardEliminationNumber = &v
}

// GetMagicNumber returns the MagicNumber field value if set, zero value otherwise.
func (o *MLBRecord) GetMagicNumber() string {
	if o == nil || IsNil(o.MagicNumber) {
		var ret string
		return ret
	}
	return *o.MagicNumber
}

// GetMagicNumberOk returns a tuple with the MagicNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetMagicNumberOk() (*string, bool) {
	if o == nil || IsNil(o.MagicNumber) {
		return nil, false
	}
	return o.MagicNumber, true
}

// HasMagicNumber returns a boolean if a field has been set.
func (o *MLBRecord) HasMagicNumber() bool {
	if o != nil && !IsNil(o.MagicNumber) {
		return true
	}

	return false
}

// SetMagicNumber gets a reference to the given string and assigns it to the MagicNumber field.
func (o *MLBRecord) SetMagicNumber(v string) {
	o.MagicNumber = &v
}

// GetWins returns the Wins field value
func (o *MLBRecord) GetWins() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetWinsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *MLBRecord) SetWins(v float32) {
	o.Wins = v
}

// GetLosses returns the Losses field value
func (o *MLBRecord) GetLosses() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Losses
}

// GetLossesOk returns a tuple with the Losses field value
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetLossesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Losses, true
}

// SetLosses sets field value
func (o *MLBRecord) SetLosses(v float32) {
	o.Losses = v
}

// GetRunDifferential returns the RunDifferential field value if set, zero value otherwise.
func (o *MLBRecord) GetRunDifferential() float32 {
	if o == nil || IsNil(o.RunDifferential) {
		var ret float32
		return ret
	}
	return *o.RunDifferential
}

// GetRunDifferentialOk returns a tuple with the RunDifferential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetRunDifferentialOk() (*float32, bool) {
	if o == nil || IsNil(o.RunDifferential) {
		return nil, false
	}
	return o.RunDifferential, true
}

// HasRunDifferential returns a boolean if a field has been set.
func (o *MLBRecord) HasRunDifferential() bool {
	if o != nil && !IsNil(o.RunDifferential) {
		return true
	}

	return false
}

// SetRunDifferential gets a reference to the given float32 and assigns it to the RunDifferential field.
func (o *MLBRecord) SetRunDifferential(v float32) {
	o.RunDifferential = &v
}

// GetWinningPercentage returns the WinningPercentage field value if set, zero value otherwise.
func (o *MLBRecord) GetWinningPercentage() string {
	if o == nil || IsNil(o.WinningPercentage) {
		var ret string
		return ret
	}
	return *o.WinningPercentage
}

// GetWinningPercentageOk returns a tuple with the WinningPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBRecord) GetWinningPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.WinningPercentage) {
		return nil, false
	}
	return o.WinningPercentage, true
}

// HasWinningPercentage returns a boolean if a field has been set.
func (o *MLBRecord) HasWinningPercentage() bool {
	if o != nil && !IsNil(o.WinningPercentage) {
		return true
	}

	return false
}

// SetWinningPercentage gets a reference to the given string and assigns it to the WinningPercentage field.
func (o *MLBRecord) SetWinningPercentage(v string) {
	o.WinningPercentage = &v
}

func (o MLBRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["team"] = o.Team
	toSerialize["season"] = o.Season
	toSerialize["streak"] = o.Streak
	toSerialize["divisionRank"] = o.DivisionRank
	toSerialize["leagueRank"] = o.LeagueRank
	if !IsNil(o.SportRank) {
		toSerialize["sportRank"] = o.SportRank
	}
	if !IsNil(o.GamesPlayed) {
		toSerialize["gamesPlayed"] = o.GamesPlayed
	}
	toSerialize["gamesBack"] = o.GamesBack
	if !IsNil(o.WildCardGamesBack) {
		toSerialize["wildCardGamesBack"] = o.WildCardGamesBack
	}
	if !IsNil(o.LeagueGamesBack) {
		toSerialize["leagueGamesBack"] = o.LeagueGamesBack
	}
	if !IsNil(o.SportGamesBack) {
		toSerialize["sportGamesBack"] = o.SportGamesBack
	}
	if !IsNil(o.DivisionGamesBack) {
		toSerialize["divisionGamesBack"] = o.DivisionGamesBack
	}
	if !IsNil(o.ConferenceGamesBack) {
		toSerialize["conferenceGamesBack"] = o.ConferenceGamesBack
	}
	toSerialize["leagueRecord"] = o.LeagueRecord
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.RunsAllowed) {
		toSerialize["runsAllowed"] = o.RunsAllowed
	}
	if !IsNil(o.RunsScored) {
		toSerialize["runsScored"] = o.RunsScored
	}
	if !IsNil(o.DivisionChamp) {
		toSerialize["divisionChamp"] = o.DivisionChamp
	}
	if !IsNil(o.DivisionLeader) {
		toSerialize["divisionLeader"] = o.DivisionLeader
	}
	if !IsNil(o.HasWildcard) {
		toSerialize["hasWildcard"] = o.HasWildcard
	}
	if !IsNil(o.Clinched) {
		toSerialize["clinched"] = o.Clinched
	}
	if !IsNil(o.EliminationNumber) {
		toSerialize["eliminationNumber"] = o.EliminationNumber
	}
	if !IsNil(o.EliminationNumberSport) {
		toSerialize["eliminationNumberSport"] = o.EliminationNumberSport
	}
	if !IsNil(o.EliminationNumberLeague) {
		toSerialize["eliminationNumberLeague"] = o.EliminationNumberLeague
	}
	if !IsNil(o.EliminationNumberDivision) {
		toSerialize["eliminationNumberDivision"] = o.EliminationNumberDivision
	}
	if !IsNil(o.EliminationNumberConference) {
		toSerialize["eliminationNumberConference"] = o.EliminationNumberConference
	}
	if !IsNil(o.WildCardEliminationNumber) {
		toSerialize["wildCardEliminationNumber"] = o.WildCardEliminationNumber
	}
	if !IsNil(o.MagicNumber) {
		toSerialize["magicNumber"] = o.MagicNumber
	}
	toSerialize["wins"] = o.Wins
	toSerialize["losses"] = o.Losses
	if !IsNil(o.RunDifferential) {
		toSerialize["runDifferential"] = o.RunDifferential
	}
	if !IsNil(o.WinningPercentage) {
		toSerialize["winningPercentage"] = o.WinningPercentage
	}
	return toSerialize, nil
}

func (o *MLBRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"team",
		"season",
		"streak",
		"divisionRank",
		"leagueRank",
		"gamesBack",
		"leagueRecord",
		"wins",
		"losses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBRecord := _MLBRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBRecord)

	if err != nil {
		return err
	}

	*o = MLBRecord(varMLBRecord)

	return err
}

type NullableMLBRecord struct {
	value *MLBRecord
	isSet bool
}

func (v NullableMLBRecord) Get() *MLBRecord {
	return v.value
}

func (v *NullableMLBRecord) Set(val *MLBRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBRecord(val *MLBRecord) *NullableMLBRecord {
	return &NullableMLBRecord{value: val, isSet: true}
}

func (v NullableMLBRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


