/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
)

// checks if the MLBStreak type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBStreak{}

// MLBStreak struct for MLBStreak
type MLBStreak struct {
	// Streak Type:   * Losing Streak   * Winning Streak 
	StreakType *string `json:"streakType,omitempty"`
}

// NewMLBStreak instantiates a new MLBStreak object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBStreak() *MLBStreak {
	this := MLBStreak{}
	return &this
}

// NewMLBStreakWithDefaults instantiates a new MLBStreak object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBStreakWithDefaults() *MLBStreak {
	this := MLBStreak{}
	return &this
}

// GetStreakType returns the StreakType field value if set, zero value otherwise.
func (o *MLBStreak) GetStreakType() string {
	if o == nil || IsNil(o.StreakType) {
		var ret string
		return ret
	}
	return *o.StreakType
}

// GetStreakTypeOk returns a tuple with the StreakType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBStreak) GetStreakTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StreakType) {
		return nil, false
	}
	return o.StreakType, true
}

// HasStreakType returns a boolean if a field has been set.
func (o *MLBStreak) HasStreakType() bool {
	if o != nil && !IsNil(o.StreakType) {
		return true
	}

	return false
}

// SetStreakType gets a reference to the given string and assigns it to the StreakType field.
func (o *MLBStreak) SetStreakType(v string) {
	o.StreakType = &v
}

func (o MLBStreak) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBStreak) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StreakType) {
		toSerialize["streakType"] = o.StreakType
	}
	return toSerialize, nil
}

type NullableMLBStreak struct {
	value *MLBStreak
	isSet bool
}

func (v NullableMLBStreak) Get() *MLBStreak {
	return v.value
}

func (v *NullableMLBStreak) Set(val *MLBStreak) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBStreak) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBStreak) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBStreak(val *MLBStreak) *NullableMLBStreak {
	return &NullableMLBStreak{value: val, isSet: true}
}

func (v NullableMLBStreak) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBStreak) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


