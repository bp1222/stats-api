/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBSeason type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBSeason{}

// MLBSeason Season 
type MLBSeason struct {
	SeasonId string `json:"seasonId"`
	HasWildcard *bool `json:"hasWildcard,omitempty"`
	PreSeasonStartDate *string `json:"preSeasonStartDate,omitempty"`
	PreSeasonEndDate *string `json:"preSeasonEndDate,omitempty"`
	SeasonStartDate string `json:"seasonStartDate"`
	SeasonEndDate string `json:"seasonEndDate"`
	SpringStartDate *string `json:"springStartDate,omitempty"`
	SpringEndDate *string `json:"springEndDate,omitempty"`
	RegularSeasonStartDate string `json:"regularSeasonStartDate"`
	LastDate1stHalf *string `json:"lastDate1stHalf,omitempty"`
	AllStartDate *string `json:"allStartDate,omitempty"`
	FirstDate2ndHalf *string `json:"firstDate2ndHalf,omitempty"`
	RegularSeasonEndDate string `json:"regularSeasonEndDate"`
	PostSeasonStartDate *string `json:"postSeasonStartDate,omitempty"`
	PostSeasonEndDate *string `json:"postSeasonEndDate,omitempty"`
	OffSeasonStartDate *string `json:"offSeasonStartDate,omitempty"`
	OffSeasonEndDate *string `json:"offSeasonEndDate,omitempty"`
	SeasonLevelGamedayType *string `json:"seasonLevelGamedayType,omitempty"`
	GameLevelGamedayType *string `json:"gameLevelGamedayType,omitempty"`
	QualifierPlateAppearances *float32 `json:"qualifierPlateAppearances,omitempty"`
	QualifierOutsPitched *float32 `json:"qualifierOutsPitched,omitempty"`
}

type _MLBSeason MLBSeason

// NewMLBSeason instantiates a new MLBSeason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBSeason(seasonId string, seasonStartDate string, seasonEndDate string, regularSeasonStartDate string, regularSeasonEndDate string) *MLBSeason {
	this := MLBSeason{}
	this.SeasonId = seasonId
	this.SeasonStartDate = seasonStartDate
	this.SeasonEndDate = seasonEndDate
	this.RegularSeasonStartDate = regularSeasonStartDate
	this.RegularSeasonEndDate = regularSeasonEndDate
	return &this
}

// NewMLBSeasonWithDefaults instantiates a new MLBSeason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBSeasonWithDefaults() *MLBSeason {
	this := MLBSeason{}
	return &this
}

// GetSeasonId returns the SeasonId field value
func (o *MLBSeason) GetSeasonId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeasonId
}

// GetSeasonIdOk returns a tuple with the SeasonId field value
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetSeasonIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeasonId, true
}

// SetSeasonId sets field value
func (o *MLBSeason) SetSeasonId(v string) {
	o.SeasonId = v
}

// GetHasWildcard returns the HasWildcard field value if set, zero value otherwise.
func (o *MLBSeason) GetHasWildcard() bool {
	if o == nil || IsNil(o.HasWildcard) {
		var ret bool
		return ret
	}
	return *o.HasWildcard
}

// GetHasWildcardOk returns a tuple with the HasWildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetHasWildcardOk() (*bool, bool) {
	if o == nil || IsNil(o.HasWildcard) {
		return nil, false
	}
	return o.HasWildcard, true
}

// HasHasWildcard returns a boolean if a field has been set.
func (o *MLBSeason) HasHasWildcard() bool {
	if o != nil && !IsNil(o.HasWildcard) {
		return true
	}

	return false
}

// SetHasWildcard gets a reference to the given bool and assigns it to the HasWildcard field.
func (o *MLBSeason) SetHasWildcard(v bool) {
	o.HasWildcard = &v
}

// GetPreSeasonStartDate returns the PreSeasonStartDate field value if set, zero value otherwise.
func (o *MLBSeason) GetPreSeasonStartDate() string {
	if o == nil || IsNil(o.PreSeasonStartDate) {
		var ret string
		return ret
	}
	return *o.PreSeasonStartDate
}

// GetPreSeasonStartDateOk returns a tuple with the PreSeasonStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetPreSeasonStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.PreSeasonStartDate) {
		return nil, false
	}
	return o.PreSeasonStartDate, true
}

// HasPreSeasonStartDate returns a boolean if a field has been set.
func (o *MLBSeason) HasPreSeasonStartDate() bool {
	if o != nil && !IsNil(o.PreSeasonStartDate) {
		return true
	}

	return false
}

// SetPreSeasonStartDate gets a reference to the given string and assigns it to the PreSeasonStartDate field.
func (o *MLBSeason) SetPreSeasonStartDate(v string) {
	o.PreSeasonStartDate = &v
}

// GetPreSeasonEndDate returns the PreSeasonEndDate field value if set, zero value otherwise.
func (o *MLBSeason) GetPreSeasonEndDate() string {
	if o == nil || IsNil(o.PreSeasonEndDate) {
		var ret string
		return ret
	}
	return *o.PreSeasonEndDate
}

// GetPreSeasonEndDateOk returns a tuple with the PreSeasonEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetPreSeasonEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.PreSeasonEndDate) {
		return nil, false
	}
	return o.PreSeasonEndDate, true
}

// HasPreSeasonEndDate returns a boolean if a field has been set.
func (o *MLBSeason) HasPreSeasonEndDate() bool {
	if o != nil && !IsNil(o.PreSeasonEndDate) {
		return true
	}

	return false
}

// SetPreSeasonEndDate gets a reference to the given string and assigns it to the PreSeasonEndDate field.
func (o *MLBSeason) SetPreSeasonEndDate(v string) {
	o.PreSeasonEndDate = &v
}

// GetSeasonStartDate returns the SeasonStartDate field value
func (o *MLBSeason) GetSeasonStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeasonStartDate
}

// GetSeasonStartDateOk returns a tuple with the SeasonStartDate field value
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetSeasonStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeasonStartDate, true
}

// SetSeasonStartDate sets field value
func (o *MLBSeason) SetSeasonStartDate(v string) {
	o.SeasonStartDate = v
}

// GetSeasonEndDate returns the SeasonEndDate field value
func (o *MLBSeason) GetSeasonEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeasonEndDate
}

// GetSeasonEndDateOk returns a tuple with the SeasonEndDate field value
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetSeasonEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeasonEndDate, true
}

// SetSeasonEndDate sets field value
func (o *MLBSeason) SetSeasonEndDate(v string) {
	o.SeasonEndDate = v
}

// GetSpringStartDate returns the SpringStartDate field value if set, zero value otherwise.
func (o *MLBSeason) GetSpringStartDate() string {
	if o == nil || IsNil(o.SpringStartDate) {
		var ret string
		return ret
	}
	return *o.SpringStartDate
}

// GetSpringStartDateOk returns a tuple with the SpringStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetSpringStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.SpringStartDate) {
		return nil, false
	}
	return o.SpringStartDate, true
}

// HasSpringStartDate returns a boolean if a field has been set.
func (o *MLBSeason) HasSpringStartDate() bool {
	if o != nil && !IsNil(o.SpringStartDate) {
		return true
	}

	return false
}

// SetSpringStartDate gets a reference to the given string and assigns it to the SpringStartDate field.
func (o *MLBSeason) SetSpringStartDate(v string) {
	o.SpringStartDate = &v
}

// GetSpringEndDate returns the SpringEndDate field value if set, zero value otherwise.
func (o *MLBSeason) GetSpringEndDate() string {
	if o == nil || IsNil(o.SpringEndDate) {
		var ret string
		return ret
	}
	return *o.SpringEndDate
}

// GetSpringEndDateOk returns a tuple with the SpringEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetSpringEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.SpringEndDate) {
		return nil, false
	}
	return o.SpringEndDate, true
}

// HasSpringEndDate returns a boolean if a field has been set.
func (o *MLBSeason) HasSpringEndDate() bool {
	if o != nil && !IsNil(o.SpringEndDate) {
		return true
	}

	return false
}

// SetSpringEndDate gets a reference to the given string and assigns it to the SpringEndDate field.
func (o *MLBSeason) SetSpringEndDate(v string) {
	o.SpringEndDate = &v
}

// GetRegularSeasonStartDate returns the RegularSeasonStartDate field value
func (o *MLBSeason) GetRegularSeasonStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegularSeasonStartDate
}

// GetRegularSeasonStartDateOk returns a tuple with the RegularSeasonStartDate field value
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetRegularSeasonStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegularSeasonStartDate, true
}

// SetRegularSeasonStartDate sets field value
func (o *MLBSeason) SetRegularSeasonStartDate(v string) {
	o.RegularSeasonStartDate = v
}

// GetLastDate1stHalf returns the LastDate1stHalf field value if set, zero value otherwise.
func (o *MLBSeason) GetLastDate1stHalf() string {
	if o == nil || IsNil(o.LastDate1stHalf) {
		var ret string
		return ret
	}
	return *o.LastDate1stHalf
}

// GetLastDate1stHalfOk returns a tuple with the LastDate1stHalf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetLastDate1stHalfOk() (*string, bool) {
	if o == nil || IsNil(o.LastDate1stHalf) {
		return nil, false
	}
	return o.LastDate1stHalf, true
}

// HasLastDate1stHalf returns a boolean if a field has been set.
func (o *MLBSeason) HasLastDate1stHalf() bool {
	if o != nil && !IsNil(o.LastDate1stHalf) {
		return true
	}

	return false
}

// SetLastDate1stHalf gets a reference to the given string and assigns it to the LastDate1stHalf field.
func (o *MLBSeason) SetLastDate1stHalf(v string) {
	o.LastDate1stHalf = &v
}

// GetAllStartDate returns the AllStartDate field value if set, zero value otherwise.
func (o *MLBSeason) GetAllStartDate() string {
	if o == nil || IsNil(o.AllStartDate) {
		var ret string
		return ret
	}
	return *o.AllStartDate
}

// GetAllStartDateOk returns a tuple with the AllStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetAllStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.AllStartDate) {
		return nil, false
	}
	return o.AllStartDate, true
}

// HasAllStartDate returns a boolean if a field has been set.
func (o *MLBSeason) HasAllStartDate() bool {
	if o != nil && !IsNil(o.AllStartDate) {
		return true
	}

	return false
}

// SetAllStartDate gets a reference to the given string and assigns it to the AllStartDate field.
func (o *MLBSeason) SetAllStartDate(v string) {
	o.AllStartDate = &v
}

// GetFirstDate2ndHalf returns the FirstDate2ndHalf field value if set, zero value otherwise.
func (o *MLBSeason) GetFirstDate2ndHalf() string {
	if o == nil || IsNil(o.FirstDate2ndHalf) {
		var ret string
		return ret
	}
	return *o.FirstDate2ndHalf
}

// GetFirstDate2ndHalfOk returns a tuple with the FirstDate2ndHalf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetFirstDate2ndHalfOk() (*string, bool) {
	if o == nil || IsNil(o.FirstDate2ndHalf) {
		return nil, false
	}
	return o.FirstDate2ndHalf, true
}

// HasFirstDate2ndHalf returns a boolean if a field has been set.
func (o *MLBSeason) HasFirstDate2ndHalf() bool {
	if o != nil && !IsNil(o.FirstDate2ndHalf) {
		return true
	}

	return false
}

// SetFirstDate2ndHalf gets a reference to the given string and assigns it to the FirstDate2ndHalf field.
func (o *MLBSeason) SetFirstDate2ndHalf(v string) {
	o.FirstDate2ndHalf = &v
}

// GetRegularSeasonEndDate returns the RegularSeasonEndDate field value
func (o *MLBSeason) GetRegularSeasonEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegularSeasonEndDate
}

// GetRegularSeasonEndDateOk returns a tuple with the RegularSeasonEndDate field value
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetRegularSeasonEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegularSeasonEndDate, true
}

// SetRegularSeasonEndDate sets field value
func (o *MLBSeason) SetRegularSeasonEndDate(v string) {
	o.RegularSeasonEndDate = v
}

// GetPostSeasonStartDate returns the PostSeasonStartDate field value if set, zero value otherwise.
func (o *MLBSeason) GetPostSeasonStartDate() string {
	if o == nil || IsNil(o.PostSeasonStartDate) {
		var ret string
		return ret
	}
	return *o.PostSeasonStartDate
}

// GetPostSeasonStartDateOk returns a tuple with the PostSeasonStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetPostSeasonStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.PostSeasonStartDate) {
		return nil, false
	}
	return o.PostSeasonStartDate, true
}

// HasPostSeasonStartDate returns a boolean if a field has been set.
func (o *MLBSeason) HasPostSeasonStartDate() bool {
	if o != nil && !IsNil(o.PostSeasonStartDate) {
		return true
	}

	return false
}

// SetPostSeasonStartDate gets a reference to the given string and assigns it to the PostSeasonStartDate field.
func (o *MLBSeason) SetPostSeasonStartDate(v string) {
	o.PostSeasonStartDate = &v
}

// GetPostSeasonEndDate returns the PostSeasonEndDate field value if set, zero value otherwise.
func (o *MLBSeason) GetPostSeasonEndDate() string {
	if o == nil || IsNil(o.PostSeasonEndDate) {
		var ret string
		return ret
	}
	return *o.PostSeasonEndDate
}

// GetPostSeasonEndDateOk returns a tuple with the PostSeasonEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetPostSeasonEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.PostSeasonEndDate) {
		return nil, false
	}
	return o.PostSeasonEndDate, true
}

// HasPostSeasonEndDate returns a boolean if a field has been set.
func (o *MLBSeason) HasPostSeasonEndDate() bool {
	if o != nil && !IsNil(o.PostSeasonEndDate) {
		return true
	}

	return false
}

// SetPostSeasonEndDate gets a reference to the given string and assigns it to the PostSeasonEndDate field.
func (o *MLBSeason) SetPostSeasonEndDate(v string) {
	o.PostSeasonEndDate = &v
}

// GetOffSeasonStartDate returns the OffSeasonStartDate field value if set, zero value otherwise.
func (o *MLBSeason) GetOffSeasonStartDate() string {
	if o == nil || IsNil(o.OffSeasonStartDate) {
		var ret string
		return ret
	}
	return *o.OffSeasonStartDate
}

// GetOffSeasonStartDateOk returns a tuple with the OffSeasonStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetOffSeasonStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.OffSeasonStartDate) {
		return nil, false
	}
	return o.OffSeasonStartDate, true
}

// HasOffSeasonStartDate returns a boolean if a field has been set.
func (o *MLBSeason) HasOffSeasonStartDate() bool {
	if o != nil && !IsNil(o.OffSeasonStartDate) {
		return true
	}

	return false
}

// SetOffSeasonStartDate gets a reference to the given string and assigns it to the OffSeasonStartDate field.
func (o *MLBSeason) SetOffSeasonStartDate(v string) {
	o.OffSeasonStartDate = &v
}

// GetOffSeasonEndDate returns the OffSeasonEndDate field value if set, zero value otherwise.
func (o *MLBSeason) GetOffSeasonEndDate() string {
	if o == nil || IsNil(o.OffSeasonEndDate) {
		var ret string
		return ret
	}
	return *o.OffSeasonEndDate
}

// GetOffSeasonEndDateOk returns a tuple with the OffSeasonEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetOffSeasonEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.OffSeasonEndDate) {
		return nil, false
	}
	return o.OffSeasonEndDate, true
}

// HasOffSeasonEndDate returns a boolean if a field has been set.
func (o *MLBSeason) HasOffSeasonEndDate() bool {
	if o != nil && !IsNil(o.OffSeasonEndDate) {
		return true
	}

	return false
}

// SetOffSeasonEndDate gets a reference to the given string and assigns it to the OffSeasonEndDate field.
func (o *MLBSeason) SetOffSeasonEndDate(v string) {
	o.OffSeasonEndDate = &v
}

// GetSeasonLevelGamedayType returns the SeasonLevelGamedayType field value if set, zero value otherwise.
func (o *MLBSeason) GetSeasonLevelGamedayType() string {
	if o == nil || IsNil(o.SeasonLevelGamedayType) {
		var ret string
		return ret
	}
	return *o.SeasonLevelGamedayType
}

// GetSeasonLevelGamedayTypeOk returns a tuple with the SeasonLevelGamedayType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetSeasonLevelGamedayTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonLevelGamedayType) {
		return nil, false
	}
	return o.SeasonLevelGamedayType, true
}

// HasSeasonLevelGamedayType returns a boolean if a field has been set.
func (o *MLBSeason) HasSeasonLevelGamedayType() bool {
	if o != nil && !IsNil(o.SeasonLevelGamedayType) {
		return true
	}

	return false
}

// SetSeasonLevelGamedayType gets a reference to the given string and assigns it to the SeasonLevelGamedayType field.
func (o *MLBSeason) SetSeasonLevelGamedayType(v string) {
	o.SeasonLevelGamedayType = &v
}

// GetGameLevelGamedayType returns the GameLevelGamedayType field value if set, zero value otherwise.
func (o *MLBSeason) GetGameLevelGamedayType() string {
	if o == nil || IsNil(o.GameLevelGamedayType) {
		var ret string
		return ret
	}
	return *o.GameLevelGamedayType
}

// GetGameLevelGamedayTypeOk returns a tuple with the GameLevelGamedayType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetGameLevelGamedayTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GameLevelGamedayType) {
		return nil, false
	}
	return o.GameLevelGamedayType, true
}

// HasGameLevelGamedayType returns a boolean if a field has been set.
func (o *MLBSeason) HasGameLevelGamedayType() bool {
	if o != nil && !IsNil(o.GameLevelGamedayType) {
		return true
	}

	return false
}

// SetGameLevelGamedayType gets a reference to the given string and assigns it to the GameLevelGamedayType field.
func (o *MLBSeason) SetGameLevelGamedayType(v string) {
	o.GameLevelGamedayType = &v
}

// GetQualifierPlateAppearances returns the QualifierPlateAppearances field value if set, zero value otherwise.
func (o *MLBSeason) GetQualifierPlateAppearances() float32 {
	if o == nil || IsNil(o.QualifierPlateAppearances) {
		var ret float32
		return ret
	}
	return *o.QualifierPlateAppearances
}

// GetQualifierPlateAppearancesOk returns a tuple with the QualifierPlateAppearances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetQualifierPlateAppearancesOk() (*float32, bool) {
	if o == nil || IsNil(o.QualifierPlateAppearances) {
		return nil, false
	}
	return o.QualifierPlateAppearances, true
}

// HasQualifierPlateAppearances returns a boolean if a field has been set.
func (o *MLBSeason) HasQualifierPlateAppearances() bool {
	if o != nil && !IsNil(o.QualifierPlateAppearances) {
		return true
	}

	return false
}

// SetQualifierPlateAppearances gets a reference to the given float32 and assigns it to the QualifierPlateAppearances field.
func (o *MLBSeason) SetQualifierPlateAppearances(v float32) {
	o.QualifierPlateAppearances = &v
}

// GetQualifierOutsPitched returns the QualifierOutsPitched field value if set, zero value otherwise.
func (o *MLBSeason) GetQualifierOutsPitched() float32 {
	if o == nil || IsNil(o.QualifierOutsPitched) {
		var ret float32
		return ret
	}
	return *o.QualifierOutsPitched
}

// GetQualifierOutsPitchedOk returns a tuple with the QualifierOutsPitched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBSeason) GetQualifierOutsPitchedOk() (*float32, bool) {
	if o == nil || IsNil(o.QualifierOutsPitched) {
		return nil, false
	}
	return o.QualifierOutsPitched, true
}

// HasQualifierOutsPitched returns a boolean if a field has been set.
func (o *MLBSeason) HasQualifierOutsPitched() bool {
	if o != nil && !IsNil(o.QualifierOutsPitched) {
		return true
	}

	return false
}

// SetQualifierOutsPitched gets a reference to the given float32 and assigns it to the QualifierOutsPitched field.
func (o *MLBSeason) SetQualifierOutsPitched(v float32) {
	o.QualifierOutsPitched = &v
}

func (o MLBSeason) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBSeason) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["seasonId"] = o.SeasonId
	if !IsNil(o.HasWildcard) {
		toSerialize["hasWildcard"] = o.HasWildcard
	}
	if !IsNil(o.PreSeasonStartDate) {
		toSerialize["preSeasonStartDate"] = o.PreSeasonStartDate
	}
	if !IsNil(o.PreSeasonEndDate) {
		toSerialize["preSeasonEndDate"] = o.PreSeasonEndDate
	}
	toSerialize["seasonStartDate"] = o.SeasonStartDate
	toSerialize["seasonEndDate"] = o.SeasonEndDate
	if !IsNil(o.SpringStartDate) {
		toSerialize["springStartDate"] = o.SpringStartDate
	}
	if !IsNil(o.SpringEndDate) {
		toSerialize["springEndDate"] = o.SpringEndDate
	}
	toSerialize["regularSeasonStartDate"] = o.RegularSeasonStartDate
	if !IsNil(o.LastDate1stHalf) {
		toSerialize["lastDate1stHalf"] = o.LastDate1stHalf
	}
	if !IsNil(o.AllStartDate) {
		toSerialize["allStartDate"] = o.AllStartDate
	}
	if !IsNil(o.FirstDate2ndHalf) {
		toSerialize["firstDate2ndHalf"] = o.FirstDate2ndHalf
	}
	toSerialize["regularSeasonEndDate"] = o.RegularSeasonEndDate
	if !IsNil(o.PostSeasonStartDate) {
		toSerialize["postSeasonStartDate"] = o.PostSeasonStartDate
	}
	if !IsNil(o.PostSeasonEndDate) {
		toSerialize["postSeasonEndDate"] = o.PostSeasonEndDate
	}
	if !IsNil(o.OffSeasonStartDate) {
		toSerialize["offSeasonStartDate"] = o.OffSeasonStartDate
	}
	if !IsNil(o.OffSeasonEndDate) {
		toSerialize["offSeasonEndDate"] = o.OffSeasonEndDate
	}
	if !IsNil(o.SeasonLevelGamedayType) {
		toSerialize["seasonLevelGamedayType"] = o.SeasonLevelGamedayType
	}
	if !IsNil(o.GameLevelGamedayType) {
		toSerialize["gameLevelGamedayType"] = o.GameLevelGamedayType
	}
	if !IsNil(o.QualifierPlateAppearances) {
		toSerialize["qualifierPlateAppearances"] = o.QualifierPlateAppearances
	}
	if !IsNil(o.QualifierOutsPitched) {
		toSerialize["qualifierOutsPitched"] = o.QualifierOutsPitched
	}
	return toSerialize, nil
}

func (o *MLBSeason) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"seasonId",
		"seasonStartDate",
		"seasonEndDate",
		"regularSeasonStartDate",
		"regularSeasonEndDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBSeason := _MLBSeason{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBSeason)

	if err != nil {
		return err
	}

	*o = MLBSeason(varMLBSeason)

	return err
}

type NullableMLBSeason struct {
	value *MLBSeason
	isSet bool
}

func (v NullableMLBSeason) Get() *MLBSeason {
	return v.value
}

func (v *NullableMLBSeason) Set(val *MLBSeason) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBSeason) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBSeason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBSeason(val *MLBSeason) *NullableMLBSeason {
	return &NullableMLBSeason{value: val, isSet: true}
}

func (v NullableMLBSeason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBSeason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


