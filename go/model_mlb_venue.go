/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBVenue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBVenue{}

// MLBVenue Venue 
type MLBVenue struct {
	Id float32 `json:"id"`
	Name string `json:"name"`
	Link *string `json:"link,omitempty"`
	Active *bool `json:"active,omitempty"`
	Season *string `json:"season,omitempty"`
}

type _MLBVenue MLBVenue

// NewMLBVenue instantiates a new MLBVenue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBVenue(id float32, name string) *MLBVenue {
	this := MLBVenue{}
	this.Id = id
	this.Name = name
	return &this
}

// NewMLBVenueWithDefaults instantiates a new MLBVenue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBVenueWithDefaults() *MLBVenue {
	this := MLBVenue{}
	return &this
}

// GetId returns the Id field value
func (o *MLBVenue) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MLBVenue) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MLBVenue) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MLBVenue) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MLBVenue) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MLBVenue) SetName(v string) {
	o.Name = v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *MLBVenue) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBVenue) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *MLBVenue) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *MLBVenue) SetLink(v string) {
	o.Link = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *MLBVenue) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBVenue) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *MLBVenue) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *MLBVenue) SetActive(v bool) {
	o.Active = &v
}

// GetSeason returns the Season field value if set, zero value otherwise.
func (o *MLBVenue) GetSeason() string {
	if o == nil || IsNil(o.Season) {
		var ret string
		return ret
	}
	return *o.Season
}

// GetSeasonOk returns a tuple with the Season field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBVenue) GetSeasonOk() (*string, bool) {
	if o == nil || IsNil(o.Season) {
		return nil, false
	}
	return o.Season, true
}

// HasSeason returns a boolean if a field has been set.
func (o *MLBVenue) HasSeason() bool {
	if o != nil && !IsNil(o.Season) {
		return true
	}

	return false
}

// SetSeason gets a reference to the given string and assigns it to the Season field.
func (o *MLBVenue) SetSeason(v string) {
	o.Season = &v
}

func (o MLBVenue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBVenue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Season) {
		toSerialize["season"] = o.Season
	}
	return toSerialize, nil
}

func (o *MLBVenue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBVenue := _MLBVenue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBVenue)

	if err != nil {
		return err
	}

	*o = MLBVenue(varMLBVenue)

	return err
}

type NullableMLBVenue struct {
	value *MLBVenue
	isSet bool
}

func (v NullableMLBVenue) Get() *MLBVenue {
	return v.value
}

func (v *NullableMLBVenue) Set(val *MLBVenue) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBVenue) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBVenue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBVenue(val *MLBVenue) *NullableMLBVenue {
	return &NullableMLBVenue{value: val, isSet: true}
}

func (v NullableMLBVenue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBVenue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


