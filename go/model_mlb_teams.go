/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
)

// checks if the MLBTeams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBTeams{}

// MLBTeams struct for MLBTeams
type MLBTeams struct {
	Teams []MLBTeam `json:"teams,omitempty"`
}

// NewMLBTeams instantiates a new MLBTeams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBTeams() *MLBTeams {
	this := MLBTeams{}
	return &this
}

// NewMLBTeamsWithDefaults instantiates a new MLBTeams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBTeamsWithDefaults() *MLBTeams {
	this := MLBTeams{}
	return &this
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *MLBTeams) GetTeams() []MLBTeam {
	if o == nil || IsNil(o.Teams) {
		var ret []MLBTeam
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeams) GetTeamsOk() ([]MLBTeam, bool) {
	if o == nil || IsNil(o.Teams) {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *MLBTeams) HasTeams() bool {
	if o != nil && !IsNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []MLBTeam and assigns it to the Teams field.
func (o *MLBTeams) SetTeams(v []MLBTeam) {
	o.Teams = v
}

func (o MLBTeams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBTeams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	return toSerialize, nil
}

type NullableMLBTeams struct {
	value *MLBTeams
	isSet bool
}

func (v NullableMLBTeams) Get() *MLBTeams {
	return v.value
}

func (v *NullableMLBTeams) Set(val *MLBTeams) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBTeams) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBTeams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBTeams(val *MLBTeams) *NullableMLBTeams {
	return &NullableMLBTeams{value: val, isSet: true}
}

func (v NullableMLBTeams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBTeams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


