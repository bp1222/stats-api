/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBTeam{}

// MLBTeam Team 
type MLBTeam struct {
	Id float32 `json:"id"`
	Name string `json:"name"`
	Link *string `json:"link,omitempty"`
	AllStarStatus *string `json:"allStarStatus,omitempty"`
	Season *float32 `json:"season,omitempty"`
	Venue *MLBVenue `json:"venue,omitempty"`
	SpringVenue *MLBVenue `json:"springVenue,omitempty"`
	TeamCode *string `json:"teamCode,omitempty"`
	FileCode *string `json:"fileCode,omitempty"`
	Abbreviation *string `json:"abbreviation,omitempty"`
	TeamName *string `json:"teamName,omitempty"`
	LocationName *string `json:"locationName,omitempty"`
	FirstYearOfPlay *string `json:"firstYearOfPlay,omitempty"`
	League *MLBLeague `json:"league,omitempty"`
	SpringLeague *MLBLeague `json:"springLeague,omitempty"`
	Division *MLBDivision `json:"division,omitempty"`
	Sport *MLBSport `json:"sport,omitempty"`
	ShortName *string `json:"shortName,omitempty"`
	FranchiseName *string `json:"franchiseName,omitempty"`
	ClubName *string `json:"clubName,omitempty"`
	Active *bool `json:"active,omitempty"`
}

type _MLBTeam MLBTeam

// NewMLBTeam instantiates a new MLBTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBTeam(id float32, name string) *MLBTeam {
	this := MLBTeam{}
	this.Id = id
	this.Name = name
	return &this
}

// NewMLBTeamWithDefaults instantiates a new MLBTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBTeamWithDefaults() *MLBTeam {
	this := MLBTeam{}
	return &this
}

// GetId returns the Id field value
func (o *MLBTeam) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MLBTeam) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MLBTeam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MLBTeam) SetName(v string) {
	o.Name = v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *MLBTeam) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *MLBTeam) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *MLBTeam) SetLink(v string) {
	o.Link = &v
}

// GetAllStarStatus returns the AllStarStatus field value if set, zero value otherwise.
func (o *MLBTeam) GetAllStarStatus() string {
	if o == nil || IsNil(o.AllStarStatus) {
		var ret string
		return ret
	}
	return *o.AllStarStatus
}

// GetAllStarStatusOk returns a tuple with the AllStarStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetAllStarStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AllStarStatus) {
		return nil, false
	}
	return o.AllStarStatus, true
}

// HasAllStarStatus returns a boolean if a field has been set.
func (o *MLBTeam) HasAllStarStatus() bool {
	if o != nil && !IsNil(o.AllStarStatus) {
		return true
	}

	return false
}

// SetAllStarStatus gets a reference to the given string and assigns it to the AllStarStatus field.
func (o *MLBTeam) SetAllStarStatus(v string) {
	o.AllStarStatus = &v
}

// GetSeason returns the Season field value if set, zero value otherwise.
func (o *MLBTeam) GetSeason() float32 {
	if o == nil || IsNil(o.Season) {
		var ret float32
		return ret
	}
	return *o.Season
}

// GetSeasonOk returns a tuple with the Season field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetSeasonOk() (*float32, bool) {
	if o == nil || IsNil(o.Season) {
		return nil, false
	}
	return o.Season, true
}

// HasSeason returns a boolean if a field has been set.
func (o *MLBTeam) HasSeason() bool {
	if o != nil && !IsNil(o.Season) {
		return true
	}

	return false
}

// SetSeason gets a reference to the given float32 and assigns it to the Season field.
func (o *MLBTeam) SetSeason(v float32) {
	o.Season = &v
}

// GetVenue returns the Venue field value if set, zero value otherwise.
func (o *MLBTeam) GetVenue() MLBVenue {
	if o == nil || IsNil(o.Venue) {
		var ret MLBVenue
		return ret
	}
	return *o.Venue
}

// GetVenueOk returns a tuple with the Venue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetVenueOk() (*MLBVenue, bool) {
	if o == nil || IsNil(o.Venue) {
		return nil, false
	}
	return o.Venue, true
}

// HasVenue returns a boolean if a field has been set.
func (o *MLBTeam) HasVenue() bool {
	if o != nil && !IsNil(o.Venue) {
		return true
	}

	return false
}

// SetVenue gets a reference to the given MLBVenue and assigns it to the Venue field.
func (o *MLBTeam) SetVenue(v MLBVenue) {
	o.Venue = &v
}

// GetSpringVenue returns the SpringVenue field value if set, zero value otherwise.
func (o *MLBTeam) GetSpringVenue() MLBVenue {
	if o == nil || IsNil(o.SpringVenue) {
		var ret MLBVenue
		return ret
	}
	return *o.SpringVenue
}

// GetSpringVenueOk returns a tuple with the SpringVenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetSpringVenueOk() (*MLBVenue, bool) {
	if o == nil || IsNil(o.SpringVenue) {
		return nil, false
	}
	return o.SpringVenue, true
}

// HasSpringVenue returns a boolean if a field has been set.
func (o *MLBTeam) HasSpringVenue() bool {
	if o != nil && !IsNil(o.SpringVenue) {
		return true
	}

	return false
}

// SetSpringVenue gets a reference to the given MLBVenue and assigns it to the SpringVenue field.
func (o *MLBTeam) SetSpringVenue(v MLBVenue) {
	o.SpringVenue = &v
}

// GetTeamCode returns the TeamCode field value if set, zero value otherwise.
func (o *MLBTeam) GetTeamCode() string {
	if o == nil || IsNil(o.TeamCode) {
		var ret string
		return ret
	}
	return *o.TeamCode
}

// GetTeamCodeOk returns a tuple with the TeamCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetTeamCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TeamCode) {
		return nil, false
	}
	return o.TeamCode, true
}

// HasTeamCode returns a boolean if a field has been set.
func (o *MLBTeam) HasTeamCode() bool {
	if o != nil && !IsNil(o.TeamCode) {
		return true
	}

	return false
}

// SetTeamCode gets a reference to the given string and assigns it to the TeamCode field.
func (o *MLBTeam) SetTeamCode(v string) {
	o.TeamCode = &v
}

// GetFileCode returns the FileCode field value if set, zero value otherwise.
func (o *MLBTeam) GetFileCode() string {
	if o == nil || IsNil(o.FileCode) {
		var ret string
		return ret
	}
	return *o.FileCode
}

// GetFileCodeOk returns a tuple with the FileCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetFileCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FileCode) {
		return nil, false
	}
	return o.FileCode, true
}

// HasFileCode returns a boolean if a field has been set.
func (o *MLBTeam) HasFileCode() bool {
	if o != nil && !IsNil(o.FileCode) {
		return true
	}

	return false
}

// SetFileCode gets a reference to the given string and assigns it to the FileCode field.
func (o *MLBTeam) SetFileCode(v string) {
	o.FileCode = &v
}

// GetAbbreviation returns the Abbreviation field value if set, zero value otherwise.
func (o *MLBTeam) GetAbbreviation() string {
	if o == nil || IsNil(o.Abbreviation) {
		var ret string
		return ret
	}
	return *o.Abbreviation
}

// GetAbbreviationOk returns a tuple with the Abbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.Abbreviation) {
		return nil, false
	}
	return o.Abbreviation, true
}

// HasAbbreviation returns a boolean if a field has been set.
func (o *MLBTeam) HasAbbreviation() bool {
	if o != nil && !IsNil(o.Abbreviation) {
		return true
	}

	return false
}

// SetAbbreviation gets a reference to the given string and assigns it to the Abbreviation field.
func (o *MLBTeam) SetAbbreviation(v string) {
	o.Abbreviation = &v
}

// GetTeamName returns the TeamName field value if set, zero value otherwise.
func (o *MLBTeam) GetTeamName() string {
	if o == nil || IsNil(o.TeamName) {
		var ret string
		return ret
	}
	return *o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetTeamNameOk() (*string, bool) {
	if o == nil || IsNil(o.TeamName) {
		return nil, false
	}
	return o.TeamName, true
}

// HasTeamName returns a boolean if a field has been set.
func (o *MLBTeam) HasTeamName() bool {
	if o != nil && !IsNil(o.TeamName) {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given string and assigns it to the TeamName field.
func (o *MLBTeam) SetTeamName(v string) {
	o.TeamName = &v
}

// GetLocationName returns the LocationName field value if set, zero value otherwise.
func (o *MLBTeam) GetLocationName() string {
	if o == nil || IsNil(o.LocationName) {
		var ret string
		return ret
	}
	return *o.LocationName
}

// GetLocationNameOk returns a tuple with the LocationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetLocationNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocationName) {
		return nil, false
	}
	return o.LocationName, true
}

// HasLocationName returns a boolean if a field has been set.
func (o *MLBTeam) HasLocationName() bool {
	if o != nil && !IsNil(o.LocationName) {
		return true
	}

	return false
}

// SetLocationName gets a reference to the given string and assigns it to the LocationName field.
func (o *MLBTeam) SetLocationName(v string) {
	o.LocationName = &v
}

// GetFirstYearOfPlay returns the FirstYearOfPlay field value if set, zero value otherwise.
func (o *MLBTeam) GetFirstYearOfPlay() string {
	if o == nil || IsNil(o.FirstYearOfPlay) {
		var ret string
		return ret
	}
	return *o.FirstYearOfPlay
}

// GetFirstYearOfPlayOk returns a tuple with the FirstYearOfPlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetFirstYearOfPlayOk() (*string, bool) {
	if o == nil || IsNil(o.FirstYearOfPlay) {
		return nil, false
	}
	return o.FirstYearOfPlay, true
}

// HasFirstYearOfPlay returns a boolean if a field has been set.
func (o *MLBTeam) HasFirstYearOfPlay() bool {
	if o != nil && !IsNil(o.FirstYearOfPlay) {
		return true
	}

	return false
}

// SetFirstYearOfPlay gets a reference to the given string and assigns it to the FirstYearOfPlay field.
func (o *MLBTeam) SetFirstYearOfPlay(v string) {
	o.FirstYearOfPlay = &v
}

// GetLeague returns the League field value if set, zero value otherwise.
func (o *MLBTeam) GetLeague() MLBLeague {
	if o == nil || IsNil(o.League) {
		var ret MLBLeague
		return ret
	}
	return *o.League
}

// GetLeagueOk returns a tuple with the League field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetLeagueOk() (*MLBLeague, bool) {
	if o == nil || IsNil(o.League) {
		return nil, false
	}
	return o.League, true
}

// HasLeague returns a boolean if a field has been set.
func (o *MLBTeam) HasLeague() bool {
	if o != nil && !IsNil(o.League) {
		return true
	}

	return false
}

// SetLeague gets a reference to the given MLBLeague and assigns it to the League field.
func (o *MLBTeam) SetLeague(v MLBLeague) {
	o.League = &v
}

// GetSpringLeague returns the SpringLeague field value if set, zero value otherwise.
func (o *MLBTeam) GetSpringLeague() MLBLeague {
	if o == nil || IsNil(o.SpringLeague) {
		var ret MLBLeague
		return ret
	}
	return *o.SpringLeague
}

// GetSpringLeagueOk returns a tuple with the SpringLeague field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetSpringLeagueOk() (*MLBLeague, bool) {
	if o == nil || IsNil(o.SpringLeague) {
		return nil, false
	}
	return o.SpringLeague, true
}

// HasSpringLeague returns a boolean if a field has been set.
func (o *MLBTeam) HasSpringLeague() bool {
	if o != nil && !IsNil(o.SpringLeague) {
		return true
	}

	return false
}

// SetSpringLeague gets a reference to the given MLBLeague and assigns it to the SpringLeague field.
func (o *MLBTeam) SetSpringLeague(v MLBLeague) {
	o.SpringLeague = &v
}

// GetDivision returns the Division field value if set, zero value otherwise.
func (o *MLBTeam) GetDivision() MLBDivision {
	if o == nil || IsNil(o.Division) {
		var ret MLBDivision
		return ret
	}
	return *o.Division
}

// GetDivisionOk returns a tuple with the Division field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetDivisionOk() (*MLBDivision, bool) {
	if o == nil || IsNil(o.Division) {
		return nil, false
	}
	return o.Division, true
}

// HasDivision returns a boolean if a field has been set.
func (o *MLBTeam) HasDivision() bool {
	if o != nil && !IsNil(o.Division) {
		return true
	}

	return false
}

// SetDivision gets a reference to the given MLBDivision and assigns it to the Division field.
func (o *MLBTeam) SetDivision(v MLBDivision) {
	o.Division = &v
}

// GetSport returns the Sport field value if set, zero value otherwise.
func (o *MLBTeam) GetSport() MLBSport {
	if o == nil || IsNil(o.Sport) {
		var ret MLBSport
		return ret
	}
	return *o.Sport
}

// GetSportOk returns a tuple with the Sport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetSportOk() (*MLBSport, bool) {
	if o == nil || IsNil(o.Sport) {
		return nil, false
	}
	return o.Sport, true
}

// HasSport returns a boolean if a field has been set.
func (o *MLBTeam) HasSport() bool {
	if o != nil && !IsNil(o.Sport) {
		return true
	}

	return false
}

// SetSport gets a reference to the given MLBSport and assigns it to the Sport field.
func (o *MLBTeam) SetSport(v MLBSport) {
	o.Sport = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *MLBTeam) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *MLBTeam) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *MLBTeam) SetShortName(v string) {
	o.ShortName = &v
}

// GetFranchiseName returns the FranchiseName field value if set, zero value otherwise.
func (o *MLBTeam) GetFranchiseName() string {
	if o == nil || IsNil(o.FranchiseName) {
		var ret string
		return ret
	}
	return *o.FranchiseName
}

// GetFranchiseNameOk returns a tuple with the FranchiseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetFranchiseNameOk() (*string, bool) {
	if o == nil || IsNil(o.FranchiseName) {
		return nil, false
	}
	return o.FranchiseName, true
}

// HasFranchiseName returns a boolean if a field has been set.
func (o *MLBTeam) HasFranchiseName() bool {
	if o != nil && !IsNil(o.FranchiseName) {
		return true
	}

	return false
}

// SetFranchiseName gets a reference to the given string and assigns it to the FranchiseName field.
func (o *MLBTeam) SetFranchiseName(v string) {
	o.FranchiseName = &v
}

// GetClubName returns the ClubName field value if set, zero value otherwise.
func (o *MLBTeam) GetClubName() string {
	if o == nil || IsNil(o.ClubName) {
		var ret string
		return ret
	}
	return *o.ClubName
}

// GetClubNameOk returns a tuple with the ClubName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetClubNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClubName) {
		return nil, false
	}
	return o.ClubName, true
}

// HasClubName returns a boolean if a field has been set.
func (o *MLBTeam) HasClubName() bool {
	if o != nil && !IsNil(o.ClubName) {
		return true
	}

	return false
}

// SetClubName gets a reference to the given string and assigns it to the ClubName field.
func (o *MLBTeam) SetClubName(v string) {
	o.ClubName = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *MLBTeam) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBTeam) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *MLBTeam) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *MLBTeam) SetActive(v bool) {
	o.Active = &v
}

func (o MLBTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.AllStarStatus) {
		toSerialize["allStarStatus"] = o.AllStarStatus
	}
	if !IsNil(o.Season) {
		toSerialize["season"] = o.Season
	}
	if !IsNil(o.Venue) {
		toSerialize["venue"] = o.Venue
	}
	if !IsNil(o.SpringVenue) {
		toSerialize["springVenue"] = o.SpringVenue
	}
	if !IsNil(o.TeamCode) {
		toSerialize["teamCode"] = o.TeamCode
	}
	if !IsNil(o.FileCode) {
		toSerialize["fileCode"] = o.FileCode
	}
	if !IsNil(o.Abbreviation) {
		toSerialize["abbreviation"] = o.Abbreviation
	}
	if !IsNil(o.TeamName) {
		toSerialize["teamName"] = o.TeamName
	}
	if !IsNil(o.LocationName) {
		toSerialize["locationName"] = o.LocationName
	}
	if !IsNil(o.FirstYearOfPlay) {
		toSerialize["firstYearOfPlay"] = o.FirstYearOfPlay
	}
	if !IsNil(o.League) {
		toSerialize["league"] = o.League
	}
	if !IsNil(o.SpringLeague) {
		toSerialize["springLeague"] = o.SpringLeague
	}
	if !IsNil(o.Division) {
		toSerialize["division"] = o.Division
	}
	if !IsNil(o.Sport) {
		toSerialize["sport"] = o.Sport
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.FranchiseName) {
		toSerialize["franchiseName"] = o.FranchiseName
	}
	if !IsNil(o.ClubName) {
		toSerialize["clubName"] = o.ClubName
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

func (o *MLBTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBTeam := _MLBTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBTeam)

	if err != nil {
		return err
	}

	*o = MLBTeam(varMLBTeam)

	return err
}

type NullableMLBTeam struct {
	value *MLBTeam
	isSet bool
}

func (v NullableMLBTeam) Get() *MLBTeam {
	return v.value
}

func (v *NullableMLBTeam) Set(val *MLBTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBTeam(val *MLBTeam) *NullableMLBTeam {
	return &NullableMLBTeam{value: val, isSet: true}
}

func (v NullableMLBTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


