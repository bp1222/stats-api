/*
MLB StatAPI

An spec API to consume the MLB Stat API 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MLBGameTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MLBGameTeam{}

// MLBGameTeam Game Team 
type MLBGameTeam struct {
	LeagueRecord *MLBLeagueRecord `json:"leagueRecord,omitempty"`
	Score float32 `json:"score"`
	Team MLBTeam `json:"team"`
	IsWinner bool `json:"isWinner"`
	SplitSquad *bool `json:"splitSquad,omitempty"`
	SeriesNumber *float32 `json:"seriesNumber,omitempty"`
}

type _MLBGameTeam MLBGameTeam

// NewMLBGameTeam instantiates a new MLBGameTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMLBGameTeam(score float32, team MLBTeam, isWinner bool) *MLBGameTeam {
	this := MLBGameTeam{}
	this.Score = score
	this.Team = team
	this.IsWinner = isWinner
	return &this
}

// NewMLBGameTeamWithDefaults instantiates a new MLBGameTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMLBGameTeamWithDefaults() *MLBGameTeam {
	this := MLBGameTeam{}
	return &this
}

// GetLeagueRecord returns the LeagueRecord field value if set, zero value otherwise.
func (o *MLBGameTeam) GetLeagueRecord() MLBLeagueRecord {
	if o == nil || IsNil(o.LeagueRecord) {
		var ret MLBLeagueRecord
		return ret
	}
	return *o.LeagueRecord
}

// GetLeagueRecordOk returns a tuple with the LeagueRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBGameTeam) GetLeagueRecordOk() (*MLBLeagueRecord, bool) {
	if o == nil || IsNil(o.LeagueRecord) {
		return nil, false
	}
	return o.LeagueRecord, true
}

// HasLeagueRecord returns a boolean if a field has been set.
func (o *MLBGameTeam) HasLeagueRecord() bool {
	if o != nil && !IsNil(o.LeagueRecord) {
		return true
	}

	return false
}

// SetLeagueRecord gets a reference to the given MLBLeagueRecord and assigns it to the LeagueRecord field.
func (o *MLBGameTeam) SetLeagueRecord(v MLBLeagueRecord) {
	o.LeagueRecord = &v
}

// GetScore returns the Score field value
func (o *MLBGameTeam) GetScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *MLBGameTeam) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *MLBGameTeam) SetScore(v float32) {
	o.Score = v
}

// GetTeam returns the Team field value
func (o *MLBGameTeam) GetTeam() MLBTeam {
	if o == nil {
		var ret MLBTeam
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *MLBGameTeam) GetTeamOk() (*MLBTeam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *MLBGameTeam) SetTeam(v MLBTeam) {
	o.Team = v
}

// GetIsWinner returns the IsWinner field value
func (o *MLBGameTeam) GetIsWinner() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsWinner
}

// GetIsWinnerOk returns a tuple with the IsWinner field value
// and a boolean to check if the value has been set.
func (o *MLBGameTeam) GetIsWinnerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsWinner, true
}

// SetIsWinner sets field value
func (o *MLBGameTeam) SetIsWinner(v bool) {
	o.IsWinner = v
}

// GetSplitSquad returns the SplitSquad field value if set, zero value otherwise.
func (o *MLBGameTeam) GetSplitSquad() bool {
	if o == nil || IsNil(o.SplitSquad) {
		var ret bool
		return ret
	}
	return *o.SplitSquad
}

// GetSplitSquadOk returns a tuple with the SplitSquad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBGameTeam) GetSplitSquadOk() (*bool, bool) {
	if o == nil || IsNil(o.SplitSquad) {
		return nil, false
	}
	return o.SplitSquad, true
}

// HasSplitSquad returns a boolean if a field has been set.
func (o *MLBGameTeam) HasSplitSquad() bool {
	if o != nil && !IsNil(o.SplitSquad) {
		return true
	}

	return false
}

// SetSplitSquad gets a reference to the given bool and assigns it to the SplitSquad field.
func (o *MLBGameTeam) SetSplitSquad(v bool) {
	o.SplitSquad = &v
}

// GetSeriesNumber returns the SeriesNumber field value if set, zero value otherwise.
func (o *MLBGameTeam) GetSeriesNumber() float32 {
	if o == nil || IsNil(o.SeriesNumber) {
		var ret float32
		return ret
	}
	return *o.SeriesNumber
}

// GetSeriesNumberOk returns a tuple with the SeriesNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MLBGameTeam) GetSeriesNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.SeriesNumber) {
		return nil, false
	}
	return o.SeriesNumber, true
}

// HasSeriesNumber returns a boolean if a field has been set.
func (o *MLBGameTeam) HasSeriesNumber() bool {
	if o != nil && !IsNil(o.SeriesNumber) {
		return true
	}

	return false
}

// SetSeriesNumber gets a reference to the given float32 and assigns it to the SeriesNumber field.
func (o *MLBGameTeam) SetSeriesNumber(v float32) {
	o.SeriesNumber = &v
}

func (o MLBGameTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MLBGameTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LeagueRecord) {
		toSerialize["leagueRecord"] = o.LeagueRecord
	}
	toSerialize["score"] = o.Score
	toSerialize["team"] = o.Team
	toSerialize["isWinner"] = o.IsWinner
	if !IsNil(o.SplitSquad) {
		toSerialize["splitSquad"] = o.SplitSquad
	}
	if !IsNil(o.SeriesNumber) {
		toSerialize["seriesNumber"] = o.SeriesNumber
	}
	return toSerialize, nil
}

func (o *MLBGameTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"score",
		"team",
		"isWinner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMLBGameTeam := _MLBGameTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMLBGameTeam)

	if err != nil {
		return err
	}

	*o = MLBGameTeam(varMLBGameTeam)

	return err
}

type NullableMLBGameTeam struct {
	value *MLBGameTeam
	isSet bool
}

func (v NullableMLBGameTeam) Get() *MLBGameTeam {
	return v.value
}

func (v *NullableMLBGameTeam) Set(val *MLBGameTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableMLBGameTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableMLBGameTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMLBGameTeam(val *MLBGameTeam) *NullableMLBGameTeam {
	return &NullableMLBGameTeam{value: val, isSet: true}
}

func (v NullableMLBGameTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMLBGameTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


