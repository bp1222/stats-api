/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An spec API to consume the MLB Stat API 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MLBDivision } from './MLBDivision';
import {
    MLBDivisionFromJSON,
    MLBDivisionFromJSONTyped,
    MLBDivisionToJSON,
} from './MLBDivision';
import type { MLBVenue } from './MLBVenue';
import {
    MLBVenueFromJSON,
    MLBVenueFromJSONTyped,
    MLBVenueToJSON,
} from './MLBVenue';
import type { MLBLeague } from './MLBLeague';
import {
    MLBLeagueFromJSON,
    MLBLeagueFromJSONTyped,
    MLBLeagueToJSON,
} from './MLBLeague';
import type { MLBSport } from './MLBSport';
import {
    MLBSportFromJSON,
    MLBSportFromJSONTyped,
    MLBSportToJSON,
} from './MLBSport';

/**
 * Team
 * 
 * @export
 * @interface MLBTeam
 */
export interface MLBTeam {
    /**
     * 
     * @type {number}
     * @memberof MLBTeam
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    allStarStatus?: string;
    /**
     * 
     * @type {number}
     * @memberof MLBTeam
     */
    season?: number;
    /**
     * 
     * @type {MLBVenue}
     * @memberof MLBTeam
     */
    venue?: MLBVenue;
    /**
     * 
     * @type {MLBVenue}
     * @memberof MLBTeam
     */
    springVenue?: MLBVenue;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    teamCode?: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    fileCode?: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    abbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    teamName?: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    locationName?: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    firstYearOfPlay?: string;
    /**
     * 
     * @type {MLBLeague}
     * @memberof MLBTeam
     */
    league?: MLBLeague;
    /**
     * 
     * @type {MLBLeague}
     * @memberof MLBTeam
     */
    springLeague?: MLBLeague;
    /**
     * 
     * @type {MLBDivision}
     * @memberof MLBTeam
     */
    division?: MLBDivision;
    /**
     * 
     * @type {MLBSport}
     * @memberof MLBTeam
     */
    sport?: MLBSport;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    shortName?: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    franchiseName?: string;
    /**
     * 
     * @type {string}
     * @memberof MLBTeam
     */
    clubName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MLBTeam
     */
    active?: boolean;
}

/**
 * Check if a given object implements the MLBTeam interface.
 */
export function instanceOfMLBTeam(value: object): value is MLBTeam {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function MLBTeamFromJSON(json: any): MLBTeam {
    return MLBTeamFromJSONTyped(json, false);
}

export function MLBTeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): MLBTeam {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'link': json['link'] == null ? undefined : json['link'],
        'allStarStatus': json['allStarStatus'] == null ? undefined : json['allStarStatus'],
        'season': json['season'] == null ? undefined : json['season'],
        'venue': json['venue'] == null ? undefined : MLBVenueFromJSON(json['venue']),
        'springVenue': json['springVenue'] == null ? undefined : MLBVenueFromJSON(json['springVenue']),
        'teamCode': json['teamCode'] == null ? undefined : json['teamCode'],
        'fileCode': json['fileCode'] == null ? undefined : json['fileCode'],
        'abbreviation': json['abbreviation'] == null ? undefined : json['abbreviation'],
        'teamName': json['teamName'] == null ? undefined : json['teamName'],
        'locationName': json['locationName'] == null ? undefined : json['locationName'],
        'firstYearOfPlay': json['firstYearOfPlay'] == null ? undefined : json['firstYearOfPlay'],
        'league': json['league'] == null ? undefined : MLBLeagueFromJSON(json['league']),
        'springLeague': json['springLeague'] == null ? undefined : MLBLeagueFromJSON(json['springLeague']),
        'division': json['division'] == null ? undefined : MLBDivisionFromJSON(json['division']),
        'sport': json['sport'] == null ? undefined : MLBSportFromJSON(json['sport']),
        'shortName': json['shortName'] == null ? undefined : json['shortName'],
        'franchiseName': json['franchiseName'] == null ? undefined : json['franchiseName'],
        'clubName': json['clubName'] == null ? undefined : json['clubName'],
        'active': json['active'] == null ? undefined : json['active'],
    };
}

export function MLBTeamToJSON(value?: MLBTeam | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'link': value['link'],
        'allStarStatus': value['allStarStatus'],
        'season': value['season'],
        'venue': MLBVenueToJSON(value['venue']),
        'springVenue': MLBVenueToJSON(value['springVenue']),
        'teamCode': value['teamCode'],
        'fileCode': value['fileCode'],
        'abbreviation': value['abbreviation'],
        'teamName': value['teamName'],
        'locationName': value['locationName'],
        'firstYearOfPlay': value['firstYearOfPlay'],
        'league': MLBLeagueToJSON(value['league']),
        'springLeague': MLBLeagueToJSON(value['springLeague']),
        'division': MLBDivisionToJSON(value['division']),
        'sport': MLBSportToJSON(value['sport']),
        'shortName': value['shortName'],
        'franchiseName': value['franchiseName'],
        'clubName': value['clubName'],
        'active': value['active'],
    };
}

