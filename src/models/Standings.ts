/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An spec API to consume the MLB Stat API 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { League } from './League';
import {
    LeagueFromJSON,
    LeagueFromJSONTyped,
    LeagueToJSON,
} from './League';
import type { Sport } from './Sport';
import {
    SportFromJSON,
    SportFromJSONTyped,
    SportToJSON,
} from './Sport';
import type { Division } from './Division';
import {
    DivisionFromJSON,
    DivisionFromJSONTyped,
    DivisionToJSON,
} from './Division';
import type { Record } from './Record';
import {
    RecordFromJSON,
    RecordFromJSONTyped,
    RecordToJSON,
} from './Record';

/**
 * Standings
 * 
 * @export
 * @interface Standings
 */
export interface Standings {
    /**
     * 
     * @type {string}
     * @memberof Standings
     */
    standingsType?: string;
    /**
     * 
     * @type {League}
     * @memberof Standings
     */
    league: League;
    /**
     * 
     * @type {Division}
     * @memberof Standings
     */
    division: Division;
    /**
     * 
     * @type {Sport}
     * @memberof Standings
     */
    sport: Sport;
    /**
     * 
     * @type {string}
     * @memberof Standings
     */
    lastUpdated?: string;
    /**
     * 
     * @type {Array<Record>}
     * @memberof Standings
     */
    teamRecords: Array<Record>;
}

/**
 * Check if a given object implements the Standings interface.
 */
export function instanceOfStandings(value: object): value is Standings {
    if (!('league' in value) || value['league'] === undefined) return false;
    if (!('division' in value) || value['division'] === undefined) return false;
    if (!('sport' in value) || value['sport'] === undefined) return false;
    if (!('teamRecords' in value) || value['teamRecords'] === undefined) return false;
    return true;
}

export function StandingsFromJSON(json: any): Standings {
    return StandingsFromJSONTyped(json, false);
}

export function StandingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Standings {
    if (json == null) {
        return json;
    }
    return {
        
        'standingsType': json['standingsType'] == null ? undefined : json['standingsType'],
        'league': LeagueFromJSON(json['league']),
        'division': DivisionFromJSON(json['division']),
        'sport': SportFromJSON(json['sport']),
        'lastUpdated': json['lastUpdated'] == null ? undefined : json['lastUpdated'],
        'teamRecords': ((json['teamRecords'] as Array<any>).map(RecordFromJSON)),
    };
}

export function StandingsToJSON(value?: Standings | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'standingsType': value['standingsType'],
        'league': LeagueToJSON(value['league']),
        'division': DivisionToJSON(value['division']),
        'sport': SportToJSON(value['sport']),
        'lastUpdated': value['lastUpdated'],
        'teamRecords': ((value['teamRecords'] as Array<any>).map(RecordToJSON)),
    };
}

