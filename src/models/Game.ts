/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An spec API to consume the MLB Stat API 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Venue } from './Venue';
import {
    VenueFromJSON,
    VenueFromJSONTyped,
    VenueToJSON,
} from './Venue';
import type { MLBGameStatus } from './MLBGameStatus';
import {
    MLBGameStatusFromJSON,
    MLBGameStatusFromJSONTyped,
    MLBGameStatusToJSON,
} from './MLBGameStatus';
import type { GameTeams } from './GameTeams';
import {
    GameTeamsFromJSON,
    GameTeamsFromJSONTyped,
    GameTeamsToJSON,
} from './GameTeams';
import type { GameContent } from './GameContent';
import {
    GameContentFromJSON,
    GameContentFromJSONTyped,
    GameContentToJSON,
} from './GameContent';

/**
 * Game
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    gamePk: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    gameGuid: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    link?: string;
    /**
     * Game Type:
     *   * `E` - Exhibition
     *   * `S` - Spring Training
     *   * `R` - Regular Season
     *   * `F` - Wild Card Series
     *   * `D` - Division Series
     *   * `L` - League Championship Series
     *   * `W` - World Series
     * 
     * @type {string}
     * @memberof Game
     */
    gameType: GameGameTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    season: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    gameDate: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    officialDate: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    rescheduledTo?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    rescheduledToDate?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    rescheduledFrom?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    rescheduledFromDate?: string;
    /**
     * 
     * @type {MLBGameStatus}
     * @memberof Game
     */
    status: MLBGameStatus;
    /**
     * 
     * @type {GameTeams}
     * @memberof Game
     */
    teams: GameTeams;
    /**
     * 
     * @type {Venue}
     * @memberof Game
     */
    venue?: Venue;
    /**
     * 
     * @type {GameContent}
     * @memberof Game
     */
    content?: GameContent;
    /**
     * 
     * @type {boolean}
     * @memberof Game
     */
    isTie?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    gameNumber: number;
    /**
     * 
     * @type {boolean}
     * @memberof Game
     */
    publicFacing?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    doubleHeader?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    gamedayType?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    tiebreaker?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    calendarEventID?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    seasonDisplay?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    dayNight?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    scheduledInnings?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Game
     */
    reverseHomeAwayStatus?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    inningBreakLength?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    gamesInSeries: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    seriesGameNumber: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    seriesDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    recordSource?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    ifNecessary?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    ifNecessaryDescription?: string;
}


/**
 * @export
 */
export const GameGameTypeEnum = {
    Exhibition: 'E',
    SpringTraining: 'S',
    Regular: 'R',
    WildCardSeries: 'F',
    DivisionSeries: 'D',
    LeagueChampionshipSeries: 'L',
    WorldSeries: 'W'
} as const;
export type GameGameTypeEnum = typeof GameGameTypeEnum[keyof typeof GameGameTypeEnum];


/**
 * Check if a given object implements the Game interface.
 */
export function instanceOfGame(value: object): value is Game {
    if (!('gamePk' in value) || value['gamePk'] === undefined) return false;
    if (!('gameGuid' in value) || value['gameGuid'] === undefined) return false;
    if (!('gameType' in value) || value['gameType'] === undefined) return false;
    if (!('season' in value) || value['season'] === undefined) return false;
    if (!('gameDate' in value) || value['gameDate'] === undefined) return false;
    if (!('officialDate' in value) || value['officialDate'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('teams' in value) || value['teams'] === undefined) return false;
    if (!('gameNumber' in value) || value['gameNumber'] === undefined) return false;
    if (!('gamesInSeries' in value) || value['gamesInSeries'] === undefined) return false;
    if (!('seriesGameNumber' in value) || value['seriesGameNumber'] === undefined) return false;
    return true;
}

export function GameFromJSON(json: any): Game {
    return GameFromJSONTyped(json, false);
}

export function GameFromJSONTyped(json: any, ignoreDiscriminator: boolean): Game {
    if (json == null) {
        return json;
    }
    return {
        
        'gamePk': json['gamePk'],
        'gameGuid': json['gameGuid'],
        'link': json['link'] == null ? undefined : json['link'],
        'gameType': json['gameType'],
        'season': json['season'],
        'gameDate': json['gameDate'],
        'officialDate': json['officialDate'],
        'rescheduledTo': json['rescheduledTo'] == null ? undefined : json['rescheduledTo'],
        'rescheduledToDate': json['rescheduledToDate'] == null ? undefined : json['rescheduledToDate'],
        'rescheduledFrom': json['rescheduledFrom'] == null ? undefined : json['rescheduledFrom'],
        'rescheduledFromDate': json['rescheduledFromDate'] == null ? undefined : json['rescheduledFromDate'],
        'status': MLBGameStatusFromJSON(json['status']),
        'teams': GameTeamsFromJSON(json['teams']),
        'venue': json['venue'] == null ? undefined : VenueFromJSON(json['venue']),
        'content': json['content'] == null ? undefined : GameContentFromJSON(json['content']),
        'isTie': json['isTie'] == null ? undefined : json['isTie'],
        'gameNumber': json['gameNumber'],
        'publicFacing': json['publicFacing'] == null ? undefined : json['publicFacing'],
        'doubleHeader': json['doubleHeader'] == null ? undefined : json['doubleHeader'],
        'gamedayType': json['gamedayType'] == null ? undefined : json['gamedayType'],
        'tiebreaker': json['tiebreaker'] == null ? undefined : json['tiebreaker'],
        'calendarEventID': json['calendarEventID'] == null ? undefined : json['calendarEventID'],
        'seasonDisplay': json['seasonDisplay'] == null ? undefined : json['seasonDisplay'],
        'dayNight': json['dayNight'] == null ? undefined : json['dayNight'],
        'description': json['description'] == null ? undefined : json['description'],
        'scheduledInnings': json['scheduledInnings'] == null ? undefined : json['scheduledInnings'],
        'reverseHomeAwayStatus': json['reverseHomeAwayStatus'] == null ? undefined : json['reverseHomeAwayStatus'],
        'inningBreakLength': json['inningBreakLength'] == null ? undefined : json['inningBreakLength'],
        'gamesInSeries': json['gamesInSeries'],
        'seriesGameNumber': json['seriesGameNumber'],
        'seriesDescription': json['seriesDescription'] == null ? undefined : json['seriesDescription'],
        'recordSource': json['recordSource'] == null ? undefined : json['recordSource'],
        'ifNecessary': json['ifNecessary'] == null ? undefined : json['ifNecessary'],
        'ifNecessaryDescription': json['ifNecessaryDescription'] == null ? undefined : json['ifNecessaryDescription'],
    };
}

export function GameToJSON(value?: Game | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'gamePk': value['gamePk'],
        'gameGuid': value['gameGuid'],
        'link': value['link'],
        'gameType': value['gameType'],
        'season': value['season'],
        'gameDate': value['gameDate'],
        'officialDate': value['officialDate'],
        'rescheduledTo': value['rescheduledTo'],
        'rescheduledToDate': value['rescheduledToDate'],
        'rescheduledFrom': value['rescheduledFrom'],
        'rescheduledFromDate': value['rescheduledFromDate'],
        'status': MLBGameStatusToJSON(value['status']),
        'teams': GameTeamsToJSON(value['teams']),
        'venue': VenueToJSON(value['venue']),
        'content': GameContentToJSON(value['content']),
        'isTie': value['isTie'],
        'gameNumber': value['gameNumber'],
        'publicFacing': value['publicFacing'],
        'doubleHeader': value['doubleHeader'],
        'gamedayType': value['gamedayType'],
        'tiebreaker': value['tiebreaker'],
        'calendarEventID': value['calendarEventID'],
        'seasonDisplay': value['seasonDisplay'],
        'dayNight': value['dayNight'],
        'description': value['description'],
        'scheduledInnings': value['scheduledInnings'],
        'reverseHomeAwayStatus': value['reverseHomeAwayStatus'],
        'inningBreakLength': value['inningBreakLength'],
        'gamesInSeries': value['gamesInSeries'],
        'seriesGameNumber': value['seriesGameNumber'],
        'seriesDescription': value['seriesDescription'],
        'recordSource': value['recordSource'],
        'ifNecessary': value['ifNecessary'],
        'ifNecessaryDescription': value['ifNecessaryDescription'],
    };
}

