/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An spec API to consume the MLB Stat API 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { League } from './League';
import {
    LeagueFromJSON,
    LeagueFromJSONTyped,
    LeagueToJSON,
} from './League';
import type { Sport } from './Sport';
import {
    SportFromJSON,
    SportFromJSONTyped,
    SportToJSON,
} from './Sport';

/**
 * Division 
 * 
 * @export
 * @interface Division
 */
export interface Division {
    /**
     * 
     * @type {number}
     * @memberof Division
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Division
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Division
     */
    season?: string;
    /**
     * 
     * @type {string}
     * @memberof Division
     */
    nameShort?: string;
    /**
     * 
     * @type {string}
     * @memberof Division
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof Division
     */
    abbreviation?: string;
    /**
     * 
     * @type {League}
     * @memberof Division
     */
    league?: League;
    /**
     * 
     * @type {Sport}
     * @memberof Division
     */
    sport?: Sport;
    /**
     * 
     * @type {boolean}
     * @memberof Division
     */
    hasWildcard?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Division
     */
    sortOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof Division
     */
    numPlayoffTeams?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Division
     */
    active?: boolean;
}

/**
 * Check if a given object implements the Division interface.
 */
export function instanceOfDivision(value: object): value is Division {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function DivisionFromJSON(json: any): Division {
    return DivisionFromJSONTyped(json, false);
}

export function DivisionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Division {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'season': json['season'] == null ? undefined : json['season'],
        'nameShort': json['nameShort'] == null ? undefined : json['nameShort'],
        'link': json['link'] == null ? undefined : json['link'],
        'abbreviation': json['abbreviation'] == null ? undefined : json['abbreviation'],
        'league': json['league'] == null ? undefined : LeagueFromJSON(json['league']),
        'sport': json['sport'] == null ? undefined : SportFromJSON(json['sport']),
        'hasWildcard': json['hasWildcard'] == null ? undefined : json['hasWildcard'],
        'sortOrder': json['sortOrder'] == null ? undefined : json['sortOrder'],
        'numPlayoffTeams': json['numPlayoffTeams'] == null ? undefined : json['numPlayoffTeams'],
        'active': json['active'] == null ? undefined : json['active'],
    };
}

export function DivisionToJSON(value?: Division | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'season': value['season'],
        'nameShort': value['nameShort'],
        'link': value['link'],
        'abbreviation': value['abbreviation'],
        'league': LeagueToJSON(value['league']),
        'sport': SportToJSON(value['sport']),
        'hasWildcard': value['hasWildcard'],
        'sortOrder': value['sortOrder'],
        'numPlayoffTeams': value['numPlayoffTeams'],
        'active': value['active'],
    };
}

